><!-- Interpolation test -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div>{{ true ? call(1 + 2 + 3) : 'test'  }}</div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div>{{ testing.call(1 + 2 + 3, another?.one()).test }}</div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>
><td mat-cell
#^^^^^^^^^^^^^ expression.ng
>    *ngFor="let param of params | async as p; last as last; first as first">
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>    {{ param.costCode?.name(test, {test: 'test'} 'test', 123) }}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
></td>
#^^^^^^ expression.ng
>
><!-- Property binding test -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [ ngStyle ]="{
#^^^^^^^^^^^^^^^^^^^^ expression.ng
>  'max-width.px': i * 2 + 5
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>}"></div>
#^^^^^^^^^^ expression.ng
><div [ngClass]="{
#^^^^^^^^^^^^^^^^^^ expression.ng
>    'class-one': test.test(),
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>    'class-two',
#^^^^^^^^^^^^^^^^^ expression.ng
>    'class-three'
#^^^^^^^^^^^^^^^^^^ expression.ng
>}"></div>>
#^^^^^^^^^^^ expression.ng
>
><div [@animation.trigger]="val"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><img [attr.aria-label]="val" />
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [my-property]="val"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [my_property]="val"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [myProperty$]="val"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [%invalidProperty]="val"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [invalidProperty)="val"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>
><!-- Event binding test -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><button (click)="onClick($event)"></button>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><input (ngModelChange)="onModelChange($event)" />
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div (@animation.done)="onAnimationDone($event)"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div (someEvent)="
#^^^^^^^^^^^^^^^^^^^ expression.ng
>    if (isCondition) {
#^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>        methodIfTrue($event);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>    } else {
#^^^^^^^^^^^^^ expression.ng
>        methodIfFalse($event);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>    }
#^^^^^^ expression.ng
>"></div>
#^^^^^^^^^ expression.ng
><div ( extraSpacing )="onExtraSpacing($event)"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component (myEvent)="onMyEvent($event)"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component (my-event)="onMyEvent($event)"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component (my_event)="onMyEvent($event)"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component (myEvent$)="onMyEvent($event)"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component (%invalidEvent)="onMyEvent($event)"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component (invalidEvent]="onMyEvent($event)"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>
><!-- Two-way binding test -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><button [(click)]="clickProp"></button>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [( extraSpacing )]="extraSpacing"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div [(@animation.done)]="animation"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component [(my-prop)]="myProp"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component [(my_prop)]="myProp"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component [($my_prop)]="myProp"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component [(%invalid)]="invalid"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component ([invalid)]="invalid"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>
><!-- Event binding test -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><button *ngModel="title"></button>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><div *ngFor="let book of books"></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component *custom-if="true != false"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component *custom_if="true != false"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component *custom_$if="true != false"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
><my-component *%invalid="expr"></my-component>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng
>