><!-- Data types -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Improved tests cases
#     ^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng
#          ^^^^^ expression.ng variable.other.readwrite.ts
#               ^ expression.ng
#                ^^ expression.ng keyword.operator.decrement.ts
#                  ^ expression.ng keyword.operator.relational.ts
>{{ variable }}
#^^^ expression.ng
#   ^^^^^^^^ expression.ng variable.other.readwrite.ts
#           ^^^^ expression.ng
>{{ 'string' }}
#^^^ expression.ng
#   ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#    ^^^^^^ expression.ng string.quoted.single.ts
#          ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#           ^^^^ expression.ng
>{{ "string" }}
#^^^ expression.ng
#   ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#    ^^^^^^ expression.ng string.quoted.double.ts
#          ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#           ^^^^ expression.ng
>{{ 1 }}
#^^^ expression.ng
#   ^ expression.ng constant.numeric.decimal.ts
#    ^^^^ expression.ng
>{{ true }}
#^^^ expression.ng
#   ^^^^ expression.ng constant.language.boolean.true.ts
#       ^^^^ expression.ng
>{{ false }}
#^^^ expression.ng
#   ^^^^^ expression.ng constant.language.boolean.false.ts
#        ^^^^ expression.ng
>{{ null }}
#^^^ expression.ng
#   ^^^^ expression.ng constant.language.null.ts
#       ^^^^ expression.ng
>{{ this }}
#^^^ expression.ng
#   ^^^^ expression.ng variable.language.this.ts
#       ^^^^ expression.ng
>{{ undefined }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng constant.language.undefined.ts
#            ^^^^ expression.ng
>{{ [variable, variable] }}
#^^^ expression.ng
#   ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#            ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#             ^ expression.ng meta.array.literal.ts
#              ^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                       ^^^^ expression.ng
>{{ ['string', 'string'] }}
#^^^ expression.ng
#   ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#     ^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#           ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#            ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#               ^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                     ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                       ^^^^ expression.ng
>{{ ["string", "string"] }}
#^^^ expression.ng
#   ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#     ^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#           ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#            ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#               ^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                     ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                       ^^^^ expression.ng
>{{ [1, 2] }}
#^^^ expression.ng
#   ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#     ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#      ^ expression.ng meta.array.literal.ts
#       ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#        ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#         ^^^^ expression.ng
>{{ [true, false, null, this, undefined] }}
#^^^ expression.ng
#   ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^^^^ expression.ng meta.array.literal.ts constant.language.boolean.true.ts
#        ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#         ^ expression.ng meta.array.literal.ts
#          ^^^^^ expression.ng meta.array.literal.ts constant.language.boolean.false.ts
#               ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                ^ expression.ng meta.array.literal.ts
#                 ^^^^ expression.ng meta.array.literal.ts constant.language.null.ts
#                     ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ expression.ng meta.array.literal.ts
#                       ^^^^ expression.ng meta.array.literal.ts variable.language.this.ts
#                           ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                            ^ expression.ng meta.array.literal.ts
#                             ^^^^^^^^^ expression.ng meta.array.literal.ts constant.language.undefined.ts
#                                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                       ^^^^ expression.ng
>{{ {object: variable} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^^^^^^^^ expression.ng variable.other.readwrite.ts
#                    ^^^^^ expression.ng
>{{ {object: 'string'} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#             ^^^^^^ expression.ng string.quoted.single.ts
#                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                    ^^^^^ expression.ng
>{{ {object: "string"} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^ expression.ng string.quoted.double.ts
#                   ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^^^^^ expression.ng
>{{ {object: 1} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng constant.numeric.decimal.ts
#             ^^^^^ expression.ng
>{{ {object: true} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^^^^ expression.ng constant.language.boolean.true.ts
#                ^^^^^ expression.ng
>{{ {object: false} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^^^^^ expression.ng constant.language.boolean.false.ts
#                 ^^^^^ expression.ng
>{{ {object: null} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^^^^ expression.ng constant.language.null.ts
#                ^^^^^ expression.ng
>{{ {object: this} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^^^^ expression.ng variable.language.this.ts
#                ^^^^^ expression.ng
>{{ {object: undefined} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^^^^^^^^^ expression.ng constant.language.undefined.ts
#                     ^^^^^ expression.ng
>{{ {object: [variable, variable]} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                     ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ expression.ng meta.array.literal.ts
#                       ^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                ^^^^^ expression.ng
>{{ {object: ['string', 'string']} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#              ^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ expression.ng meta.array.literal.ts
#                       ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                        ^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                              ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                ^^^^^ expression.ng
>{{ {object: ["string", "string"]} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#              ^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                    ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                     ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ expression.ng meta.array.literal.ts
#                       ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                        ^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                              ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                ^^^^^ expression.ng
>{{ {object: [1, 2]} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#              ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#               ^ expression.ng meta.array.literal.ts
#                ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                 ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                  ^^^^^ expression.ng
>{{ {object: [true, false, null, this, undefined]} }}
#^^^^ expression.ng
#    ^^^^^^ expression.ng variable.other.readwrite.ts
#          ^^ expression.ng
#            ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^^^^ expression.ng meta.array.literal.ts constant.language.boolean.true.ts
#                 ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                  ^ expression.ng meta.array.literal.ts
#                   ^^^^^ expression.ng meta.array.literal.ts constant.language.boolean.false.ts
#                        ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                         ^ expression.ng meta.array.literal.ts
#                          ^^^^ expression.ng meta.array.literal.ts constant.language.null.ts
#                              ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                               ^ expression.ng meta.array.literal.ts
#                                ^^^^ expression.ng meta.array.literal.ts variable.language.this.ts
#                                    ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                     ^ expression.ng meta.array.literal.ts
#                                      ^^^^^^^^^ expression.ng meta.array.literal.ts constant.language.undefined.ts
#                                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                ^^^^^ expression.ng
<<<<<<< HEAD
>
><!-- Property read and method call: implicit -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng
#                   ^^^ expression.ng variable.other.readwrite.ts
#                      ^ expression.ng
#                       ^^^^^^ expression.ng variable.other.readwrite.ts
#                             ^ expression.ng
#                              ^^^^ expression.ng variable.other.readwrite.ts
#                                  ^^ expression.ng
#                                    ^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                            ^ expression.ng
#                                             ^^ expression.ng keyword.operator.decrement.ts
#                                               ^ expression.ng keyword.operator.relational.ts
>{{ call() }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^^^ expression.ng
>{{ call(); }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^^^^ expression.ng
>{{ call().object }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^^^ expression.ng variable.other.property.ts
#                ^^^^ expression.ng
>{{ call().object; }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^^^ expression.ng variable.other.property.ts
#                ^^^^^ expression.ng
>{{ call()?.conditional }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^ expression.ng
>{{ call()?.conditional; }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^^ expression.ng
>{{ call()!.conditional }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^ expression.ng
>{{ call()!.conditional; }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^^ expression.ng
>
><!-- Property read and method call: received -->
=======
#     ^^^^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng
#                   ^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng
#                        ^^ expression.ng keyword.operator.decrement.ts
#                          ^ expression.ng keyword.operator.relational.ts
><div>{{ true ? call(1 + 2 + 3) : ['test', 1, test()]  }}</div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng keyword.operator.relational.ts
#     ^^^ expression.ng
#        ^^^^ expression.ng constant.language.boolean.true.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^^^^ expression.ng entity.name.function.ts
#                   ^ expression.ng meta.brace.round.ts
#                    ^ expression.ng constant.numeric.decimal.ts
#                     ^ expression.ng
#                      ^ expression.ng keyword.operator.arithmetic.ts
#                       ^ expression.ng
#                        ^ expression.ng constant.numeric.decimal.ts
#                         ^ expression.ng
#                          ^ expression.ng keyword.operator.arithmetic.ts
#                           ^ expression.ng
#                            ^ expression.ng constant.numeric.decimal.ts
#                             ^ expression.ng meta.brace.round.ts
#                              ^ expression.ng
#                               ^ expression.ng keyword.operator.ternary.ts
#                                ^ expression.ng
#                                 ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                  ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                   ^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                       ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                        ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                         ^ expression.ng meta.array.literal.ts
#                                          ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                                           ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                            ^ expression.ng meta.array.literal.ts
#                                             ^^^^ expression.ng meta.array.literal.ts entity.name.function.ts
#                                                 ^ expression.ng meta.array.literal.ts meta.brace.round.ts
#                                                  ^ expression.ng meta.array.literal.ts meta.brace.round.ts
#                                                   ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                    ^^ expression.ng
#                                                      ^^ expression.ng
#                                                        ^ expression.ng keyword.operator.relational.ts
#                                                         ^ expression.ng keyword.operator.arithmetic.ts
#                                                          ^^^ expression.ng variable.other.readwrite.ts
#                                                             ^ expression.ng keyword.operator.relational.ts
><div>{{ testing.call(1 + 2 + 3, another?.one()).test }}</div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng keyword.operator.relational.ts
#     ^^^ expression.ng
#        ^^^^^^^ expression.ng variable.other.object.ts
#               ^ expression.ng punctuation.accessor.ts
#                ^^^^ expression.ng entity.name.function.ts
#                    ^ expression.ng meta.brace.round.ts
#                     ^ expression.ng constant.numeric.decimal.ts
#                      ^ expression.ng
#                       ^ expression.ng keyword.operator.arithmetic.ts
#                        ^ expression.ng
#                         ^ expression.ng constant.numeric.decimal.ts
#                          ^ expression.ng
#                           ^ expression.ng keyword.operator.arithmetic.ts
#                            ^ expression.ng
#                             ^ expression.ng constant.numeric.decimal.ts
#                              ^ expression.ng punctuation.separator.comma.ts
#                               ^ expression.ng
#                                ^^^^^^^ expression.ng variable.other.readwrite.ts
#                                       ^ expression.ng punctuation.accessor.ts
#                                        ^ expression.ng punctuation.accessor.ts
#                                         ^^^ expression.ng entity.name.function.ts
#                                            ^ expression.ng meta.brace.round.ts
#                                             ^ expression.ng meta.brace.round.ts
#                                              ^ expression.ng meta.brace.round.ts
#                                               ^ expression.ng punctuation.accessor.ts
#                                                ^^^^ expression.ng variable.other.property.ts
#                                                    ^^^ expression.ng
#                                                       ^ expression.ng keyword.operator.relational.ts
#                                                        ^ expression.ng keyword.operator.arithmetic.ts
#                                                         ^^^ expression.ng variable.other.readwrite.ts
#                                                            ^ expression.ng keyword.operator.relational.ts
><div>{{ param.costCode?.name(test, {test: 'test'} 'test', 123, [1, 2, 3, 4]) }}</div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng keyword.operator.relational.ts
#     ^^^ expression.ng
#        ^^^^^ expression.ng variable.other.object.ts
#             ^ expression.ng punctuation.accessor.ts
#              ^^^^^^^^ expression.ng variable.other.property.ts
#                      ^ expression.ng punctuation.accessor.ts
#                       ^ expression.ng punctuation.accessor.ts
#                        ^^^^ expression.ng entity.name.function.ts
#                            ^ expression.ng meta.brace.round.ts
#                             ^^^^ expression.ng variable.other.readwrite.ts
#                                 ^ expression.ng punctuation.separator.comma.ts
#                                  ^^ expression.ng
#                                    ^^^^ expression.ng variable.other.readwrite.ts
#                                        ^^ expression.ng
#                                          ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                           ^^^^ expression.ng string.quoted.single.ts
#                                               ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                                ^^ expression.ng
#                                                  ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                   ^^^^ expression.ng string.quoted.single.ts
#                                                       ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                                        ^ expression.ng punctuation.separator.comma.ts
#                                                         ^ expression.ng
#                                                          ^^^ expression.ng constant.numeric.decimal.ts
#                                                             ^ expression.ng punctuation.separator.comma.ts
#                                                              ^ expression.ng
#                                                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                                                                 ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                  ^ expression.ng meta.array.literal.ts
#                                                                   ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                                                                    ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                     ^ expression.ng meta.array.literal.ts
#                                                                      ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                                                                       ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                        ^ expression.ng meta.array.literal.ts
#                                                                         ^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                                                                          ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                           ^ expression.ng meta.brace.round.ts
#                                                                            ^^^ expression.ng
#                                                                               ^ expression.ng keyword.operator.relational.ts
#                                                                                ^ expression.ng keyword.operator.arithmetic.ts
#                                                                                 ^^^ expression.ng variable.other.readwrite.ts
#                                                                                    ^ expression.ng keyword.operator.relational.ts
=======
>>>>>>> Improved tests cases
>
><!-- Property read and method call: implicit -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng
#                   ^^^ expression.ng variable.other.readwrite.ts
#                      ^ expression.ng
#                       ^^^^^^ expression.ng variable.other.readwrite.ts
#                             ^ expression.ng
#                              ^^^^ expression.ng variable.other.readwrite.ts
#                                  ^^ expression.ng
#                                    ^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                            ^ expression.ng
#                                             ^^ expression.ng keyword.operator.decrement.ts
#                                               ^ expression.ng keyword.operator.relational.ts
>{{ call() }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^^^ expression.ng
>{{ call(); }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^^^^ expression.ng
>{{ call().object }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^^^ expression.ng variable.other.property.ts
#                ^^^^ expression.ng
>{{ call().object; }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^^^ expression.ng variable.other.property.ts
#                ^^^^^ expression.ng
>{{ call()?.conditional }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^ expression.ng
>{{ call()?.conditional; }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^^ expression.ng
>{{ call()!.conditional }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^ expression.ng
>{{ call()!.conditional; }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.brace.round.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                      ^^^^^ expression.ng
>
><!-- Property read and method call: received -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng
#                   ^^^ expression.ng variable.other.readwrite.ts
#                      ^ expression.ng
#                       ^^^^^^ expression.ng variable.other.readwrite.ts
#                             ^ expression.ng
#                              ^^^^ expression.ng variable.other.readwrite.ts
#                                  ^^ expression.ng
#                                    ^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                            ^ expression.ng
#                                             ^^ expression.ng keyword.operator.decrement.ts
#                                               ^ expression.ng keyword.operator.relational.ts
>{{ object.call() }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^^^^ expression.ng
>{{ object.call(); }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^^^^^ expression.ng
>{{ object.call().object }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng punctuation.accessor.ts
#                 ^^^^^^ expression.ng variable.other.property.ts
#                       ^^^^ expression.ng
>{{ object.call().object; }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng punctuation.accessor.ts
#                 ^^^^^^ expression.ng variable.other.property.ts
#                       ^^^^^ expression.ng
>{{ object?.call()?.conditional }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^ expression.ng
>{{ object?.call()?.conditional; }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^^ expression.ng
>{{ object!.call()!.conditional }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^ expression.ng keyword.operator.logical.ts
#                  ^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^ expression.ng
>{{ object!.call()!.conditional; }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^ expression.ng keyword.operator.logical.ts
#                  ^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^^ expression.ng
>
<<<<<<< HEAD
<<<<<<< HEAD
><!-- Property binding test with expression -->
>>>>>>> Improved tests cases
=======
><!-- Function parameter test -->
>>>>>>> Improved tests cases
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
<<<<<<< HEAD
#              ^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng
#                   ^^^ expression.ng variable.other.readwrite.ts
#                      ^ expression.ng
#                       ^^^^^^ expression.ng variable.other.readwrite.ts
#                             ^ expression.ng
#                              ^^^^ expression.ng variable.other.readwrite.ts
#                                  ^^ expression.ng
#                                    ^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                            ^ expression.ng
#                                             ^^ expression.ng keyword.operator.decrement.ts
#                                               ^ expression.ng keyword.operator.relational.ts
>{{ object.call() }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^^^^ expression.ng
>{{ object.call(); }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^^^^^ expression.ng
>{{ object.call().object }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng punctuation.accessor.ts
#                 ^^^^^^ expression.ng variable.other.property.ts
#                       ^^^^ expression.ng
>{{ object.call().object; }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.object.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^^^^ expression.ng entity.name.function.ts
#              ^ expression.ng meta.brace.round.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng punctuation.accessor.ts
#                 ^^^^^^ expression.ng variable.other.property.ts
#                       ^^^^^ expression.ng
>{{ object?.call()?.conditional }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^ expression.ng
>{{ object?.call()?.conditional; }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng punctuation.accessor.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^^ expression.ng
>{{ object!.call()!.conditional }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^ expression.ng keyword.operator.logical.ts
#                  ^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^ expression.ng
>{{ object!.call()!.conditional; }}
#^^^ expression.ng
#   ^^^^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^ expression.ng punctuation.accessor.ts
#           ^^^^ expression.ng entity.name.function.ts
#               ^ expression.ng meta.brace.round.ts
#                ^ expression.ng meta.brace.round.ts
#                 ^ expression.ng keyword.operator.logical.ts
#                  ^ expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ expression.ng variable.other.property.ts
#                              ^^^^^ expression.ng
>
><!-- Method call with parameters -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng
#            ^^^^ expression.ng variable.other.readwrite.ts
#                ^ expression.ng
#                 ^^^^ expression.ng variable.other.readwrite.ts
#                     ^ expression.ng
<<<<<<< HEAD
#                      ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                ^ expression.ng
#                                 ^^ expression.ng keyword.operator.decrement.ts
#                                   ^ expression.ng keyword.operator.relational.ts
=======
#              ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng
#                        ^^^^ expression.ng variable.other.readwrite.ts
#                            ^ expression.ng
#                             ^^ expression.ng keyword.operator.decrement.ts
#                               ^ expression.ng keyword.operator.relational.ts
>>>>>>> Improved tests cases
>{{ call(withParams) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng meta.brace.round.ts
#                   ^^^^ expression.ng
>{{ call('withParams') }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ expression.ng string.quoted.single.ts
#                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                    ^ expression.ng meta.brace.round.ts
#                     ^^^^ expression.ng
>{{ call("withParams") }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ expression.ng string.quoted.double.ts
#                   ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^ expression.ng meta.brace.round.ts
#                     ^^^^ expression.ng
>{{ call("withParams") }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ expression.ng string.quoted.double.ts
#                   ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^ expression.ng meta.brace.round.ts
#                     ^^^^ expression.ng
>{{ call(false) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^^^^ expression.ng constant.language.boolean.false.ts
#             ^ expression.ng meta.brace.round.ts
#              ^^^^ expression.ng
>{{ call(!!true) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng keyword.operator.logical.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^^^^ expression.ng constant.language.boolean.true.ts
#              ^ expression.ng meta.brace.round.ts
#               ^^^^ expression.ng
>{{ call(["array", 123]) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#         ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#          ^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#               ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                 ^ expression.ng meta.array.literal.ts
#                  ^^^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                     ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                      ^ expression.ng meta.brace.round.ts
#                       ^^^^ expression.ng
>{{ call(1) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng constant.numeric.decimal.ts
#         ^ expression.ng meta.brace.round.ts
#          ^^^^ expression.ng
>{{ call({ test: 'object' }) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^ expression.ng
#          ^^^^ expression.ng variable.other.readwrite.ts
#              ^^ expression.ng
#                ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                 ^^^^^^ expression.ng string.quoted.single.ts
#                       ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                        ^^ expression.ng
#                          ^ expression.ng meta.brace.round.ts
#                           ^^^^ expression.ng
>{{ call({ test: 123 }) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^ expression.ng
#          ^^^^ expression.ng variable.other.readwrite.ts
#              ^^ expression.ng
#                ^^^ expression.ng constant.numeric.decimal.ts
#                   ^^ expression.ng
#                     ^ expression.ng meta.brace.round.ts
#                      ^^^^ expression.ng
>{{ call({ test: [123, 321, { value: ['string', false, true] }] }) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^ expression.ng
#          ^^^^ expression.ng variable.other.readwrite.ts
#              ^^ expression.ng
#                ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                 ^^^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                    ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                     ^ expression.ng meta.array.literal.ts
#                      ^^^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                         ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                          ^^^ expression.ng meta.array.literal.ts
#                             ^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                  ^^ expression.ng meta.array.literal.ts
#                                    ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                                     ^ expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                      ^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts
#                                            ^ expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                             ^ expression.ng meta.array.literal.ts meta.array.literal.ts punctuation.separator.comma.ts
#                                              ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#                                               ^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts constant.language.boolean.false.ts
#                                                    ^ expression.ng meta.array.literal.ts meta.array.literal.ts punctuation.separator.comma.ts
#                                                     ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#                                                      ^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts constant.language.boolean.true.ts
#                                                          ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                                                           ^^ expression.ng meta.array.literal.ts
#                                                             ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                              ^^ expression.ng
#                                                                ^ expression.ng meta.brace.round.ts
#                                                                 ^^^^ expression.ng
>
><!-- Ternary expression -->
<<<<<<< HEAD
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng
#                        ^^ expression.ng keyword.operator.decrement.ts
#                          ^ expression.ng keyword.operator.relational.ts
>{{ condition ? true : false }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^^^^ expression.ng constant.language.boolean.true.ts
#                   ^ expression.ng
#                    ^ expression.ng keyword.operator.ternary.ts
#                     ^ expression.ng
#                      ^^^^^ expression.ng constant.language.boolean.false.ts
#                           ^ expression.ng
#                            ^^^ expression.ng
>{{ condition ? true : false; }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^^^^ expression.ng constant.language.boolean.true.ts
#                   ^ expression.ng
#                    ^ expression.ng keyword.operator.ternary.ts
#                     ^ expression.ng
#                      ^^^^^ expression.ng constant.language.boolean.false.ts
#                           ^^^^^ expression.ng
>{{ condition() ? call(1 + 2 + 3) : call()  }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng entity.name.function.ts
#            ^ expression.ng meta.brace.round.ts
#             ^ expression.ng meta.brace.round.ts
#              ^ expression.ng
#               ^ expression.ng keyword.operator.ternary.ts
#                ^ expression.ng
#                 ^^^^ expression.ng entity.name.function.ts
#                     ^ expression.ng meta.brace.round.ts
#                      ^ expression.ng constant.numeric.decimal.ts
#                       ^ expression.ng
#                        ^ expression.ng keyword.operator.arithmetic.ts
#                         ^ expression.ng
#                          ^ expression.ng constant.numeric.decimal.ts
#                           ^ expression.ng
#                            ^ expression.ng keyword.operator.arithmetic.ts
#                             ^ expression.ng
#                              ^ expression.ng constant.numeric.decimal.ts
#                               ^ expression.ng meta.brace.round.ts
#                                ^ expression.ng
#                                 ^ expression.ng keyword.operator.ternary.ts
#                                  ^ expression.ng
#                                   ^^^^ expression.ng entity.name.function.ts
#                                       ^ expression.ng meta.brace.round.ts
#                                        ^ expression.ng meta.brace.round.ts
#                                         ^^ expression.ng
#                                           ^^^ expression.ng
>{{ condition() ? call(1 + 2 + 3) : call();  }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng entity.name.function.ts
#            ^ expression.ng meta.brace.round.ts
#             ^ expression.ng meta.brace.round.ts
#              ^ expression.ng
#               ^ expression.ng keyword.operator.ternary.ts
#                ^ expression.ng
#                 ^^^^ expression.ng entity.name.function.ts
#                     ^ expression.ng meta.brace.round.ts
#                      ^ expression.ng constant.numeric.decimal.ts
#                       ^ expression.ng
#                        ^ expression.ng keyword.operator.arithmetic.ts
#                         ^ expression.ng
#                          ^ expression.ng constant.numeric.decimal.ts
#                           ^ expression.ng
#                            ^ expression.ng keyword.operator.arithmetic.ts
#                             ^ expression.ng
#                              ^ expression.ng constant.numeric.decimal.ts
#                               ^ expression.ng meta.brace.round.ts
#                                ^ expression.ng
#                                 ^ expression.ng keyword.operator.ternary.ts
#                                  ^ expression.ng
#                                   ^^^^ expression.ng entity.name.function.ts
#                                       ^ expression.ng meta.brace.round.ts
#                                        ^ expression.ng meta.brace.round.ts
#                                         ^^^^^^ expression.ng
>{{ condition()?.object ? call()!.test() : false }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng entity.name.function.ts
#            ^ expression.ng meta.brace.round.ts
#             ^ expression.ng meta.brace.round.ts
#              ^^ expression.ng punctuation.accessor.ts
#                ^^^^^^ expression.ng variable.other.property.ts
#                      ^ expression.ng
#                       ^ expression.ng keyword.operator.ternary.ts
#                        ^ expression.ng
#                         ^^^^ expression.ng entity.name.function.ts
#                             ^ expression.ng meta.brace.round.ts
#                              ^ expression.ng meta.brace.round.ts
#                               ^ expression.ng keyword.operator.logical.ts
#                                ^ expression.ng punctuation.accessor.ts
#                                 ^^^^ expression.ng entity.name.function.ts
#                                     ^ expression.ng meta.brace.round.ts
#                                      ^ expression.ng meta.brace.round.ts
#                                       ^ expression.ng
#                                        ^ expression.ng keyword.operator.ternary.ts
#                                         ^ expression.ng
#                                          ^^^^^ expression.ng constant.language.boolean.false.ts
#                                               ^ expression.ng
#                                                ^^^ expression.ng
>{{ condition ? ['123'] : { test: 'a' } }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                 ^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                      ^ expression.ng
#                       ^ expression.ng keyword.operator.ternary.ts
#                        ^^^ expression.ng
#                           ^^^^ expression.ng variable.other.readwrite.ts
#                               ^^ expression.ng
#                                 ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                  ^ expression.ng string.quoted.single.ts
#                                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ expression.ng
#                                     ^^^^^ expression.ng
>{{ condition ? 'test' : "test" }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                ^^^^ expression.ng string.quoted.single.ts
#                    ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ expression.ng
#                      ^ expression.ng keyword.operator.ternary.ts
#                       ^ expression.ng
#                        ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#                         ^^^^ expression.ng string.quoted.double.ts
#                             ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                              ^^^^ expression.ng
>{{ condition ? [function(), variable] : {} }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                ^^^^^^^^ expression.ng meta.array.literal.ts entity.name.function.ts
#                        ^ expression.ng meta.array.literal.ts meta.brace.round.ts
#                         ^ expression.ng meta.array.literal.ts meta.brace.round.ts
#                          ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                           ^ expression.ng meta.array.literal.ts
#                            ^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                    ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                     ^ expression.ng
#                                      ^ expression.ng keyword.operator.ternary.ts
#                                       ^^ expression.ng
#                                         ^^^^^ expression.ng
>
<<<<<<< HEAD
><!-- Microsyntax -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                ^ expression.ng
#                 ^^ expression.ng keyword.operator.decrement.ts
#                   ^ expression.ng keyword.operator.relational.ts
><!-- Let Expression -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^ expression.ng variable.other.readwrite.ts
#        ^ expression.ng
#         ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                   ^ expression.ng
#                    ^^ expression.ng keyword.operator.decrement.ts
#                      ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                           ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                            ^ expression.ng keyword.operator.relational.ts
#                             ^ expression.ng keyword.operator.relational.ts
#                              ^ expression.ng keyword.operator.arithmetic.ts
#                               ^^^ expression.ng variable.other.readwrite.ts
#                                  ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                          ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                           ^ expression.ng keyword.operator.relational.ts
#                            ^ expression.ng keyword.operator.relational.ts
#                             ^ expression.ng keyword.operator.arithmetic.ts
#                              ^^^ expression.ng variable.other.readwrite.ts
#                                 ^ expression.ng keyword.operator.relational.ts
><!-- Key Expression -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^ expression.ng variable.other.readwrite.ts
#        ^ expression.ng
#         ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                   ^ expression.ng
#                    ^^ expression.ng keyword.operator.decrement.ts
#                      ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index; trackBy: hash;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                          ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                           ^ expression.ng keyword.operator.relational.ts
#                                            ^ expression.ng keyword.operator.relational.ts
#                                             ^ expression.ng keyword.operator.arithmetic.ts
#                                              ^^^ expression.ng variable.other.readwrite.ts
#                                                 ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index; trackBy: hash"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                         ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                          ^ expression.ng keyword.operator.relational.ts
#                                           ^ expression.ng keyword.operator.relational.ts
#                                            ^ expression.ng keyword.operator.arithmetic.ts
#                                             ^^^ expression.ng variable.other.readwrite.ts
#                                                ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                 ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                  ^ expression.ng keyword.operator.relational.ts
#                                   ^ expression.ng keyword.operator.relational.ts
#                                    ^ expression.ng keyword.operator.arithmetic.ts
#                                     ^^^ expression.ng variable.other.readwrite.ts
#                                        ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                 ^ expression.ng keyword.operator.relational.ts
#                                  ^ expression.ng keyword.operator.relational.ts
#                                   ^ expression.ng keyword.operator.arithmetic.ts
#                                    ^^^ expression.ng variable.other.readwrite.ts
#                                       ^ expression.ng keyword.operator.relational.ts
><!-- As Expression -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^ expression.ng variable.other.readwrite.ts
#       ^ expression.ng
#        ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng
#                   ^^ expression.ng keyword.operator.decrement.ts
#                     ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; index as i;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                             ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                              ^ expression.ng keyword.operator.relational.ts
#                                               ^ expression.ng keyword.operator.relational.ts
#                                                ^ expression.ng keyword.operator.arithmetic.ts
#                                                 ^^^ expression.ng variable.other.readwrite.ts
#                                                    ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; index as i"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                            ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                             ^ expression.ng keyword.operator.relational.ts
#                                              ^ expression.ng keyword.operator.relational.ts
#                                               ^ expression.ng keyword.operator.arithmetic.ts
#                                                ^^^ expression.ng variable.other.readwrite.ts
#                                                   ^ expression.ng keyword.operator.relational.ts
><!-- Mixed -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng
#           ^^ expression.ng keyword.operator.decrement.ts
#             ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; let last = last"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                                ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                                 ^ expression.ng keyword.operator.relational.ts
#                                                                  ^ expression.ng keyword.operator.relational.ts
#                                                                   ^ expression.ng keyword.operator.arithmetic.ts
#                                                                    ^^^ expression.ng variable.other.readwrite.ts
#                                                                       ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; let last = last;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                                 ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                                  ^ expression.ng keyword.operator.relational.ts
#                                                                   ^ expression.ng keyword.operator.relational.ts
#                                                                    ^ expression.ng keyword.operator.arithmetic.ts
#                                                                     ^^^ expression.ng variable.other.readwrite.ts
#                                                                        ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; last as last"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                             ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                              ^ expression.ng keyword.operator.relational.ts
#                                                               ^ expression.ng keyword.operator.relational.ts
#                                                                ^ expression.ng keyword.operator.arithmetic.ts
#                                                                 ^^^ expression.ng variable.other.readwrite.ts
#                                                                    ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; last as last;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                              ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                               ^ expression.ng keyword.operator.relational.ts
#                                                                ^ expression.ng keyword.operator.relational.ts
#                                                                 ^ expression.ng keyword.operator.arithmetic.ts
#                                                                  ^^^ expression.ng variable.other.readwrite.ts
#                                                                     ^ expression.ng keyword.operator.relational.ts
>
><!-- Pipes -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng
#           ^^ expression.ng keyword.operator.decrement.ts
#             ^ expression.ng keyword.operator.relational.ts
>{{ (let param of params) | async }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng meta.brace.round.ts
#                        ^ expression.ng
#                         ^ expression.ng keyword.operator.logical.ts
#                          ^ expression.ng
#                           ^^^^^ expression.ng entity.name.function.pipe.ng
#                                ^^^^ expression.ng
>{{ (let param of params) | trackBy: trackByMethod }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng meta.brace.round.ts
#                        ^ expression.ng
#                         ^ expression.ng keyword.operator.logical.ts
#                          ^ expression.ng
#                           ^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                  ^^ expression.ng
#                                    ^^^^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                                 ^^^^ expression.ng
>{{ (let param of params) | customPipe: 'param' | search: ['term1', 'term2'] }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng meta.brace.round.ts
#                        ^ expression.ng
#                         ^ expression.ng keyword.operator.logical.ts
#                          ^ expression.ng
#                           ^^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                     ^^ expression.ng
#                                       ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                        ^^^^^ expression.ng string.quoted.single.ts
#                                             ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                              ^ expression.ng
#                                               ^ expression.ng keyword.operator.logical.ts
#                                                ^ expression.ng
#                                                 ^^^^^^ expression.ng entity.name.function.pipe.ng
#                                                       ^^ expression.ng
#                                                         ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                          ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                           ^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                 ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                  ^ expression.ng meta.array.literal.ts
#                                                                   ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                    ^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                         ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                          ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                           ^^^^ expression.ng
>{{ ((let param of params) | async) | translate }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^ expression.ng meta.brace.round.ts
#     ^^^ expression.ng storage.type.ts
#        ^ expression.ng
#         ^^^^^ expression.ng variable.other.readwrite.ts
#              ^ expression.ng
#               ^^ expression.ng keyword.operator.expression.of.ts
#                 ^ expression.ng
#                  ^^^^^^ expression.ng variable.other.readwrite.ts
#                        ^ expression.ng meta.brace.round.ts
#                         ^ expression.ng
#                          ^ expression.ng keyword.operator.logical.ts
#                           ^ expression.ng
#                            ^^^^^ expression.ng entity.name.function.pipe.ng
#                                 ^ expression.ng meta.brace.round.ts
#                                  ^ expression.ng
#                                   ^ expression.ng keyword.operator.logical.ts
#                                    ^ expression.ng
#                                     ^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                              ^^^^ expression.ng
>
><!-- Mixed -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng
#           ^^ expression.ng keyword.operator.decrement.ts
#             ^ expression.ng keyword.operator.relational.ts
>{{ (let param of params?.get('value')!.property | async).anotherProperty | translate: ['language1', 'language2']; index as i }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng punctuation.accessor.ts
#                        ^ expression.ng punctuation.accessor.ts
#                         ^^^ expression.ng entity.name.function.ts
#                            ^ expression.ng meta.brace.round.ts
#                             ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                              ^^^^^ expression.ng string.quoted.single.ts
#                                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ expression.ng meta.brace.round.ts
#                                     ^ expression.ng keyword.operator.logical.ts
#                                      ^ expression.ng punctuation.accessor.ts
#                                       ^^^^^^^^ expression.ng variable.other.property.ts
#                                               ^ expression.ng
#                                                ^ expression.ng keyword.operator.logical.ts
#                                                 ^ expression.ng
#                                                  ^^^^^ expression.ng entity.name.function.pipe.ng
#                                                       ^ expression.ng meta.brace.round.ts
#                                                        ^ expression.ng punctuation.accessor.ts
#                                                         ^^^^^^^^^^^^^^^ expression.ng variable.other.property.ts
#                                                                        ^ expression.ng
#                                                                         ^ expression.ng keyword.operator.logical.ts
#                                                                          ^ expression.ng
#                                                                           ^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                                                                    ^^ expression.ng
#                                                                                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                       ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                        ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                 ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                  ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                                                   ^ expression.ng meta.array.literal.ts
#                                                                                                    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                                     ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                              ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                                                ^^ expression.ng
#                                                                                                                  ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                                                       ^ expression.ng
#                                                                                                                        ^^ expression.ng storage.type.as.ts
#                                                                                                                          ^ expression.ng
#                                                                                                                           ^ expression.ng entity.name.type.ts
#                                                                                                                            ^ expression.ng
#                                                                                                                             ^^^ expression.ng
>{{ (let param of params?.anotherParam!.param().param | async) as p; let i = index; let first = first }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^^ expression.ng punctuation.accessor.ts
#                         ^^^^^^^^^^^^ expression.ng variable.other.property.ts
#                                     ^ expression.ng keyword.operator.logical.ts
#                                      ^ expression.ng punctuation.accessor.ts
#                                       ^^^^^ expression.ng entity.name.function.ts
#                                            ^ expression.ng meta.brace.round.ts
#                                             ^ expression.ng meta.brace.round.ts
#                                              ^ expression.ng punctuation.accessor.ts
#                                               ^^^^^ expression.ng variable.other.property.ts
#                                                    ^ expression.ng
#                                                     ^ expression.ng keyword.operator.logical.ts
#                                                      ^ expression.ng
#                                                       ^^^^^ expression.ng entity.name.function.pipe.ng
#                                                            ^ expression.ng meta.brace.round.ts
#                                                             ^ expression.ng
#                                                              ^^ expression.ng storage.type.as.ts
#                                                                ^ expression.ng
#                                                                 ^ expression.ng entity.name.type.ts
#                                                                  ^^ expression.ng
#                                                                    ^^^ expression.ng storage.type.ts
#                                                                       ^ expression.ng
#                                                                        ^ expression.ng variable.other.readwrite.ts
#                                                                         ^ expression.ng
#                                                                          ^ expression.ng keyword.operator.assignment.ts
#                                                                           ^ expression.ng
#                                                                            ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                 ^^ expression.ng
#                                                                                   ^^^ expression.ng storage.type.ts
#                                                                                      ^ expression.ng
#                                                                                       ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                            ^ expression.ng
#                                                                                             ^ expression.ng keyword.operator.assignment.ts
#                                                                                              ^ expression.ng
#                                                                                               ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                                    ^^^^ expression.ng
>{{ (let param of params?.get('value')!.property | async).anotherProperty | translate: ['language1', 'language2']; let i = index; }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng punctuation.accessor.ts
#                        ^ expression.ng punctuation.accessor.ts
#                         ^^^ expression.ng entity.name.function.ts
#                            ^ expression.ng meta.brace.round.ts
#                             ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                              ^^^^^ expression.ng string.quoted.single.ts
#                                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ expression.ng meta.brace.round.ts
#                                     ^ expression.ng keyword.operator.logical.ts
#                                      ^ expression.ng punctuation.accessor.ts
#                                       ^^^^^^^^ expression.ng variable.other.property.ts
#                                               ^ expression.ng
#                                                ^ expression.ng keyword.operator.logical.ts
#                                                 ^ expression.ng
#                                                  ^^^^^ expression.ng entity.name.function.pipe.ng
#                                                       ^ expression.ng meta.brace.round.ts
#                                                        ^ expression.ng punctuation.accessor.ts
#                                                         ^^^^^^^^^^^^^^^ expression.ng variable.other.property.ts
#                                                                        ^ expression.ng
#                                                                         ^ expression.ng keyword.operator.logical.ts
#                                                                          ^ expression.ng
#                                                                           ^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                                                                    ^^ expression.ng
#                                                                                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                       ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                        ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                 ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                  ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                                                   ^ expression.ng meta.array.literal.ts
#                                                                                                    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                                     ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                              ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                                                ^^ expression.ng
#                                                                                                                  ^^^ expression.ng storage.type.ts
#                                                                                                                     ^ expression.ng
#                                                                                                                      ^ expression.ng variable.other.readwrite.ts
#                                                                                                                       ^ expression.ng
#                                                                                                                        ^ expression.ng keyword.operator.assignment.ts
#                                                                                                                         ^ expression.ng
#                                                                                                                          ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                                                               ^^^^^ expression.ng
>
><!-- Regression -->
=======
><!-- Method call with parameters -->
>>>>>>> fixup! Added template expression support
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
<<<<<<< HEAD
#     ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#               ^ expression.ng
#                ^^ expression.ng keyword.operator.decrement.ts
#                  ^ expression.ng keyword.operator.relational.ts
><!-- #575 -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^^ expression.ng
#      ^^^ expression.ng constant.numeric.decimal.ts
#         ^ expression.ng
#          ^^ expression.ng keyword.operator.decrement.ts
#            ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let n of nums; index as i"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                      ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                       ^ expression.ng keyword.operator.relational.ts
#                                        ^ expression.ng keyword.operator.relational.ts
#                                         ^ expression.ng keyword.operator.arithmetic.ts
#                                          ^^^ expression.ng variable.other.readwrite.ts
#                                             ^ expression.ng keyword.operator.relational.ts
><div *matHeaderCellDef></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^^^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                      ^ expression.ng keyword.operator.relational.ts
#                       ^ expression.ng keyword.operator.relational.ts
#                        ^ expression.ng keyword.operator.arithmetic.ts
#                         ^^^ expression.ng variable.other.readwrite.ts
#                            ^ expression.ng keyword.operator.relational.ts
><!-- #613 -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^^ expression.ng
#      ^^^ expression.ng constant.numeric.decimal.ts
#         ^ expression.ng
#          ^^ expression.ng keyword.operator.decrement.ts
#            ^ expression.ng keyword.operator.relational.ts
><div *ngIf="x$ | async as a"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng keyword.operator.assignment.ts
#           ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#            ^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                           ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                            ^ expression.ng keyword.operator.relational.ts
#                             ^ expression.ng keyword.operator.relational.ts
#                              ^ expression.ng keyword.operator.arithmetic.ts
#                               ^^^ expression.ng variable.other.readwrite.ts
#                                  ^ expression.ng keyword.operator.relational.ts
=======
#                      ^^^^ expression.ng variable.other.readwrite.ts
#                          ^ expression.ng
#                           ^^^^ expression.ng variable.other.readwrite.ts
#                               ^ expression.ng
#                                ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                          ^ expression.ng
#                                           ^^ expression.ng keyword.operator.decrement.ts
#                                             ^ expression.ng keyword.operator.relational.ts
><div [ ngStyle ]="{
=======
>>>>>>> Improved tests cases
=======
#     ^^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng
#            ^^^^ expression.ng variable.other.readwrite.ts
#                ^ expression.ng
#                 ^^^^ expression.ng variable.other.readwrite.ts
#                     ^ expression.ng
#                      ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                ^ expression.ng
#                                 ^^ expression.ng keyword.operator.decrement.ts
#                                   ^ expression.ng keyword.operator.relational.ts
>{{ call(withParams) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng meta.brace.round.ts
#                   ^^^^ expression.ng
>{{ call('withParams') }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ expression.ng string.quoted.single.ts
#                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                    ^ expression.ng meta.brace.round.ts
#                     ^^^^ expression.ng
>{{ call("withParams") }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ expression.ng string.quoted.double.ts
#                   ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^ expression.ng meta.brace.round.ts
#                     ^^^^ expression.ng
>{{ call("withParams") }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ expression.ng string.quoted.double.ts
#                   ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^ expression.ng meta.brace.round.ts
#                     ^^^^ expression.ng
>{{ call(false) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^^^^ expression.ng constant.language.boolean.false.ts
#             ^ expression.ng meta.brace.round.ts
#              ^^^^ expression.ng
>{{ call(!!true) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng keyword.operator.logical.ts
#         ^ expression.ng keyword.operator.logical.ts
#          ^^^^ expression.ng constant.language.boolean.true.ts
#              ^ expression.ng meta.brace.round.ts
#               ^^^^ expression.ng
>{{ call(["array", 123]) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#         ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#          ^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#               ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                 ^ expression.ng meta.array.literal.ts
#                  ^^^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                     ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                      ^ expression.ng meta.brace.round.ts
#                       ^^^^ expression.ng
>{{ call(1) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^ expression.ng constant.numeric.decimal.ts
#         ^ expression.ng meta.brace.round.ts
#          ^^^^ expression.ng
>{{ call({ test: 'object' }) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^ expression.ng
#          ^^^^ expression.ng variable.other.readwrite.ts
#              ^^ expression.ng
#                ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                 ^^^^^^ expression.ng string.quoted.single.ts
#                       ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                        ^^ expression.ng
#                          ^ expression.ng meta.brace.round.ts
#                           ^^^^ expression.ng
>{{ call({ test: 123 }) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^ expression.ng
#          ^^^^ expression.ng variable.other.readwrite.ts
#              ^^ expression.ng
#                ^^^ expression.ng constant.numeric.decimal.ts
#                   ^^ expression.ng
#                     ^ expression.ng meta.brace.round.ts
#                      ^^^^ expression.ng
>{{ call({ test: [123, 321, { value: ['string', false, true] }] }) }}
#^^^ expression.ng
#   ^^^^ expression.ng entity.name.function.ts
#       ^ expression.ng meta.brace.round.ts
#        ^^ expression.ng
#          ^^^^ expression.ng variable.other.readwrite.ts
#              ^^ expression.ng
#                ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                 ^^^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                    ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                     ^ expression.ng meta.array.literal.ts
#                      ^^^ expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                         ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                          ^^^ expression.ng meta.array.literal.ts
#                             ^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                  ^^ expression.ng meta.array.literal.ts
#                                    ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                                     ^ expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                      ^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts
#                                            ^ expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                             ^ expression.ng meta.array.literal.ts meta.array.literal.ts punctuation.separator.comma.ts
#                                              ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#                                               ^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts constant.language.boolean.false.ts
#                                                    ^ expression.ng meta.array.literal.ts meta.array.literal.ts punctuation.separator.comma.ts
#                                                     ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#                                                      ^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts constant.language.boolean.true.ts
#                                                          ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                                                           ^^ expression.ng meta.array.literal.ts
#                                                             ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                              ^^ expression.ng
#                                                                ^ expression.ng meta.brace.round.ts
#                                                                 ^^^^ expression.ng
>
><!-- Ternary expression -->
>>>>>>> fixup! Added template expression support
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng
#                        ^^ expression.ng keyword.operator.decrement.ts
#                          ^ expression.ng keyword.operator.relational.ts
>{{ condition ? true : false }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^^^^ expression.ng constant.language.boolean.true.ts
#                   ^ expression.ng
#                    ^ expression.ng keyword.operator.ternary.ts
#                     ^ expression.ng
#                      ^^^^^ expression.ng constant.language.boolean.false.ts
#                           ^ expression.ng
#                            ^^^ expression.ng
>{{ condition ? true : false; }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^^^^ expression.ng constant.language.boolean.true.ts
#                   ^ expression.ng
#                    ^ expression.ng keyword.operator.ternary.ts
#                     ^ expression.ng
#                      ^^^^^ expression.ng constant.language.boolean.false.ts
#                           ^^^^^ expression.ng
>{{ condition() ? call(1 + 2 + 3) : call()  }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng entity.name.function.ts
#            ^ expression.ng meta.brace.round.ts
#             ^ expression.ng meta.brace.round.ts
#              ^ expression.ng
#               ^ expression.ng keyword.operator.ternary.ts
#                ^ expression.ng
#                 ^^^^ expression.ng entity.name.function.ts
#                     ^ expression.ng meta.brace.round.ts
#                      ^ expression.ng constant.numeric.decimal.ts
#                       ^ expression.ng
#                        ^ expression.ng keyword.operator.arithmetic.ts
#                         ^ expression.ng
#                          ^ expression.ng constant.numeric.decimal.ts
#                           ^ expression.ng
#                            ^ expression.ng keyword.operator.arithmetic.ts
#                             ^ expression.ng
#                              ^ expression.ng constant.numeric.decimal.ts
#                               ^ expression.ng meta.brace.round.ts
#                                ^ expression.ng
#                                 ^ expression.ng keyword.operator.ternary.ts
#                                  ^ expression.ng
#                                   ^^^^ expression.ng entity.name.function.ts
#                                       ^ expression.ng meta.brace.round.ts
#                                        ^ expression.ng meta.brace.round.ts
#                                         ^^ expression.ng
#                                           ^^^ expression.ng
>{{ condition() ? call(1 + 2 + 3) : call();  }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng entity.name.function.ts
#            ^ expression.ng meta.brace.round.ts
#             ^ expression.ng meta.brace.round.ts
#              ^ expression.ng
#               ^ expression.ng keyword.operator.ternary.ts
#                ^ expression.ng
#                 ^^^^ expression.ng entity.name.function.ts
#                     ^ expression.ng meta.brace.round.ts
#                      ^ expression.ng constant.numeric.decimal.ts
#                       ^ expression.ng
#                        ^ expression.ng keyword.operator.arithmetic.ts
#                         ^ expression.ng
#                          ^ expression.ng constant.numeric.decimal.ts
#                           ^ expression.ng
#                            ^ expression.ng keyword.operator.arithmetic.ts
#                             ^ expression.ng
#                              ^ expression.ng constant.numeric.decimal.ts
#                               ^ expression.ng meta.brace.round.ts
#                                ^ expression.ng
#                                 ^ expression.ng keyword.operator.ternary.ts
#                                  ^ expression.ng
#                                   ^^^^ expression.ng entity.name.function.ts
#                                       ^ expression.ng meta.brace.round.ts
#                                        ^ expression.ng meta.brace.round.ts
#                                         ^^^^^^ expression.ng
>{{ condition()?.object ? call()!.test() : false }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng entity.name.function.ts
#            ^ expression.ng meta.brace.round.ts
#             ^ expression.ng meta.brace.round.ts
#              ^^ expression.ng punctuation.accessor.ts
#                ^^^^^^ expression.ng variable.other.property.ts
#                      ^ expression.ng
#                       ^ expression.ng keyword.operator.ternary.ts
#                        ^ expression.ng
#                         ^^^^ expression.ng entity.name.function.ts
#                             ^ expression.ng meta.brace.round.ts
#                              ^ expression.ng meta.brace.round.ts
#                               ^ expression.ng keyword.operator.logical.ts
#                                ^ expression.ng punctuation.accessor.ts
#                                 ^^^^ expression.ng entity.name.function.ts
#                                     ^ expression.ng meta.brace.round.ts
#                                      ^ expression.ng meta.brace.round.ts
#                                       ^ expression.ng
#                                        ^ expression.ng keyword.operator.ternary.ts
#                                         ^ expression.ng
#                                          ^^^^^ expression.ng constant.language.boolean.false.ts
#                                               ^ expression.ng
#                                                ^^^ expression.ng
>{{ condition ? ['123'] : { test: 'a' } }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                 ^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                      ^ expression.ng
#                       ^ expression.ng keyword.operator.ternary.ts
#                        ^^^ expression.ng
#                           ^^^^ expression.ng variable.other.readwrite.ts
#                               ^^ expression.ng
#                                 ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                  ^ expression.ng string.quoted.single.ts
#                                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ expression.ng
#                                     ^^^^^ expression.ng
>{{ condition ? 'test' : "test" }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                ^^^^ expression.ng string.quoted.single.ts
#                    ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ expression.ng
#                      ^ expression.ng keyword.operator.ternary.ts
#                       ^ expression.ng
#                        ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#                         ^^^^ expression.ng string.quoted.double.ts
#                             ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                              ^^^^ expression.ng
>{{ condition ? [function(), variable] : {} }}
#^^^ expression.ng
#   ^^^^^^^^^ expression.ng variable.other.readwrite.ts
#            ^ expression.ng
#             ^ expression.ng keyword.operator.ternary.ts
#              ^ expression.ng
#               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                ^^^^^^^^ expression.ng meta.array.literal.ts entity.name.function.ts
#                        ^ expression.ng meta.array.literal.ts meta.brace.round.ts
#                         ^ expression.ng meta.array.literal.ts meta.brace.round.ts
#                          ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                           ^ expression.ng meta.array.literal.ts
#                            ^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                    ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                     ^ expression.ng
#                                      ^ expression.ng keyword.operator.ternary.ts
#                                       ^^ expression.ng
#                                         ^^^^^ expression.ng
>
<<<<<<< HEAD
<<<<<<< HEAD
><!-- Two-way binding test -->
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^ expression.ng meta.array.literal.ts keyword.operator.logical.ts
#  ^^ expression.ng meta.array.literal.ts keyword.operator.decrement.ts
#    ^ expression.ng meta.array.literal.ts
#     ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#        ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#         ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#            ^ expression.ng meta.array.literal.ts
#             ^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                    ^ expression.ng meta.array.literal.ts
#                     ^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                         ^ expression.ng meta.array.literal.ts
#                          ^^ expression.ng meta.array.literal.ts keyword.operator.decrement.ts
#                            ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><button [(click)]="clickProp?.click()"></button>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#       ^ expression.ng meta.array.literal.ts
#        ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#         ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#          ^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#               ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                 ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                  ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                   ^^^^^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                     ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                      ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                       ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                        ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                         ^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                               ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><div [( extraSpacing )]="extraSpacing!.click()"></div>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#    ^ expression.ng meta.array.literal.ts
#     ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#      ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#       ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#        ^^^^^^^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#                    ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#                     ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                      ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                       ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                        ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                         ^^^^^^^^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                              ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                               ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                 ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                                  ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                     ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><div [(@animation.done)]="animation.done()"></div>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#    ^ expression.ng meta.array.literal.ts
#     ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#      ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#       ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#        ^^^^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.object.ts
#                 ^ expression.ng meta.array.literal.ts meta.array.literal.ts punctuation.accessor.ts
#                  ^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.property.ts
#                      ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                       ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                        ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                         ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                          ^^^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                          ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                           ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                            ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                             ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                              ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                 ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component [(my-prop)]="myProp.prop?.prop!.prop.prop"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#               ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                ^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#                  ^ expression.ng meta.array.literal.ts meta.array.literal.ts keyword.operator.arithmetic.ts
#                   ^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#                       ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                        ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                         ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                          ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                                       ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                                        ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                         ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                          ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                                           ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                             ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                                              ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                                       ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component [(my_prop)]="!!myProp.prop?.prop!.prop.prop"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#               ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                ^^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#                       ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                        ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                         ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                          ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                                         ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                                          ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                           ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                            ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                                             ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                               ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                                                ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                                         ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component [($my_prop)]="!myProp.prop && prop || prop | test:'test'"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#               ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                ^^^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#                        ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                         ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                          ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                           ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                                                      ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                                                       ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                                        ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                                                         ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                                                          ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                                            ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                                                             ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                                                      ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component [(%invalid)]="invalid"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#               ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                ^ expression.ng meta.array.literal.ts meta.array.literal.ts keyword.operator.arithmetic.ts
#                 ^^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#                        ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.round.ts
#                         ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                          ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                           ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                            ^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                   ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                    ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                     ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                      ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                       ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                         ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                          ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                   ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component ([invalid)]="invalid"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts entity.name.function.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts meta.brace.round.ts
#               ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                ^^^^^^^ expression.ng meta.array.literal.ts meta.array.literal.ts variable.other.readwrite.ts
#                       ^ expression.ng meta.array.literal.ts meta.array.literal.ts
#                        ^ expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                         ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                          ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                           ^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                  ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                   ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                    ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                     ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                      ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                        ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                         ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                  ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
>
><!-- Event binding test -->
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^ expression.ng meta.array.literal.ts keyword.operator.logical.ts
#  ^^ expression.ng meta.array.literal.ts keyword.operator.decrement.ts
#    ^ expression.ng meta.array.literal.ts
#     ^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#          ^ expression.ng meta.array.literal.ts
#           ^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                  ^ expression.ng meta.array.literal.ts
#                   ^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                       ^ expression.ng meta.array.literal.ts
#                        ^^ expression.ng meta.array.literal.ts keyword.operator.decrement.ts
#                          ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><button *ngModel="title"></button>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#       ^ expression.ng meta.array.literal.ts
#        ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#         ^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                 ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                  ^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                       ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                        ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                         ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                          ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                           ^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                 ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><div *ngFor="let book of books"></div>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#    ^ expression.ng meta.array.literal.ts
#     ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#           ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#            ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                              ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                               ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                 ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                  ^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                     ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component *custom-if="true != false"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#               ^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                     ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                      ^^ expression.ng meta.array.literal.ts keyword.control.if.ts
#                        ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                         ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                          ^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                       ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                        ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                         ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                          ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                           ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                             ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                              ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                       ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component *custom_if="true !== false"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#               ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                        ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                         ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                          ^^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                        ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                         ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                          ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                           ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                            ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                              ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                               ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                        ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component *custom_$if="true != false"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#               ^^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                         ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                          ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                           ^^^^^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                                        ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                                         ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                          ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                           ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                            ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                              ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                               ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                                        ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
><my-component *%invalid="expr"></my-component>
#^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
# ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#             ^ expression.ng meta.array.literal.ts
#              ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#               ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                ^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                       ^ expression.ng meta.array.literal.ts keyword.operator.assignment.ts
#                        ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                         ^^^^ expression.ng meta.array.literal.ts string.quoted.double.ts
#                             ^ expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                              ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                               ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
#                                ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                 ^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                   ^ expression.ng meta.array.literal.ts keyword.operator.arithmetic.ts
#                                    ^^^^^^^^^ expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                             ^ expression.ng meta.array.literal.ts keyword.operator.relational.ts
>>>>>>> Improved tests cases
=======
><!-- Expression test -->
=======
><!-- Microsyntax test -->
>>>>>>> Improved tests cases
=======
><!-- Microsyntax -->
>>>>>>> fixup! Added template expression support
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                ^ expression.ng
#                 ^^ expression.ng keyword.operator.decrement.ts
#                   ^ expression.ng keyword.operator.relational.ts
><!-- Let Expression -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^ expression.ng variable.other.readwrite.ts
#        ^ expression.ng
#         ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                   ^ expression.ng
#                    ^^ expression.ng keyword.operator.decrement.ts
#                      ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                           ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                            ^ expression.ng keyword.operator.relational.ts
#                             ^ expression.ng keyword.operator.relational.ts
#                              ^ expression.ng keyword.operator.arithmetic.ts
#                               ^^^ expression.ng variable.other.readwrite.ts
#                                  ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                          ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                           ^ expression.ng keyword.operator.relational.ts
#                            ^ expression.ng keyword.operator.relational.ts
#                             ^ expression.ng keyword.operator.arithmetic.ts
#                              ^^^ expression.ng variable.other.readwrite.ts
#                                 ^ expression.ng keyword.operator.relational.ts
><!-- Key Expression -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^ expression.ng variable.other.readwrite.ts
#        ^ expression.ng
#         ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                   ^ expression.ng
#                    ^^ expression.ng keyword.operator.decrement.ts
#                      ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index; trackBy: hash;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                          ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                           ^ expression.ng keyword.operator.relational.ts
#                                            ^ expression.ng keyword.operator.relational.ts
#                                             ^ expression.ng keyword.operator.arithmetic.ts
#                                              ^^^ expression.ng variable.other.readwrite.ts
#                                                 ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let i = index; trackBy: hash"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                         ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                          ^ expression.ng keyword.operator.relational.ts
#                                           ^ expression.ng keyword.operator.relational.ts
#                                            ^ expression.ng keyword.operator.arithmetic.ts
#                                             ^^^ expression.ng variable.other.readwrite.ts
#                                                ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                 ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                  ^ expression.ng keyword.operator.relational.ts
#                                   ^ expression.ng keyword.operator.relational.ts
#                                    ^ expression.ng keyword.operator.arithmetic.ts
#                                     ^^^ expression.ng variable.other.readwrite.ts
#                                        ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                 ^ expression.ng keyword.operator.relational.ts
#                                  ^ expression.ng keyword.operator.relational.ts
#                                   ^ expression.ng keyword.operator.arithmetic.ts
#                                    ^^^ expression.ng variable.other.readwrite.ts
#                                       ^ expression.ng keyword.operator.relational.ts
><!-- As Expression -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^ expression.ng variable.other.readwrite.ts
#       ^ expression.ng
#        ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                  ^ expression.ng
#                   ^^ expression.ng keyword.operator.decrement.ts
#                     ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; index as i;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                             ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                              ^ expression.ng keyword.operator.relational.ts
#                                               ^ expression.ng keyword.operator.relational.ts
#                                                ^ expression.ng keyword.operator.arithmetic.ts
#                                                 ^^^ expression.ng variable.other.readwrite.ts
#                                                    ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; index as i"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                            ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                             ^ expression.ng keyword.operator.relational.ts
#                                              ^ expression.ng keyword.operator.relational.ts
#                                               ^ expression.ng keyword.operator.arithmetic.ts
#                                                ^^^ expression.ng variable.other.readwrite.ts
#                                                   ^ expression.ng keyword.operator.relational.ts
><!-- Mixed -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng
#           ^^ expression.ng keyword.operator.decrement.ts
#             ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; let last = last"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                                ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                                 ^ expression.ng keyword.operator.relational.ts
#                                                                  ^ expression.ng keyword.operator.relational.ts
#                                                                   ^ expression.ng keyword.operator.arithmetic.ts
#                                                                    ^^^ expression.ng variable.other.readwrite.ts
#                                                                       ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; let last = last;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                                 ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                                  ^ expression.ng keyword.operator.relational.ts
#                                                                   ^ expression.ng keyword.operator.relational.ts
#                                                                    ^ expression.ng keyword.operator.arithmetic.ts
#                                                                     ^^^ expression.ng variable.other.readwrite.ts
#                                                                        ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; last as last"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                             ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                              ^ expression.ng keyword.operator.relational.ts
#                                                               ^ expression.ng keyword.operator.relational.ts
#                                                                ^ expression.ng keyword.operator.arithmetic.ts
#                                                                 ^^^ expression.ng variable.other.readwrite.ts
#                                                                    ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let param of params; let i = index; last as last;"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                                              ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                                               ^ expression.ng keyword.operator.relational.ts
#                                                                ^ expression.ng keyword.operator.relational.ts
#                                                                 ^ expression.ng keyword.operator.arithmetic.ts
#                                                                  ^^^ expression.ng variable.other.readwrite.ts
#                                                                     ^ expression.ng keyword.operator.relational.ts
>
><!-- Pipes -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng
#           ^^ expression.ng keyword.operator.decrement.ts
#             ^ expression.ng keyword.operator.relational.ts
>{{ (let param of params) | async }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng meta.brace.round.ts
#                        ^ expression.ng
#                         ^ expression.ng keyword.operator.logical.ts
#                          ^ expression.ng
#                           ^^^^^ expression.ng entity.name.function.pipe.ng
#                                ^^^^ expression.ng
>{{ (let param of params) | trackBy: trackByMethod }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng meta.brace.round.ts
#                        ^ expression.ng
#                         ^ expression.ng keyword.operator.logical.ts
#                          ^ expression.ng
#                           ^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                  ^^ expression.ng
#                                    ^^^^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                                                 ^^^^ expression.ng
>{{ (let param of params) | customPipe: 'param' | search: ['term1', 'term2'] }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng meta.brace.round.ts
#                        ^ expression.ng
#                         ^ expression.ng keyword.operator.logical.ts
#                          ^ expression.ng
#                           ^^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                     ^^ expression.ng
#                                       ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                        ^^^^^ expression.ng string.quoted.single.ts
#                                             ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                              ^ expression.ng
#                                               ^ expression.ng keyword.operator.logical.ts
#                                                ^ expression.ng
#                                                 ^^^^^^ expression.ng entity.name.function.pipe.ng
#                                                       ^^ expression.ng
#                                                         ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                          ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                           ^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                 ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                  ^ expression.ng meta.array.literal.ts
#                                                                   ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                    ^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                         ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                          ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                           ^^^^ expression.ng
>{{ ((let param of params) | async) | translate }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^ expression.ng meta.brace.round.ts
#     ^^^ expression.ng storage.type.ts
#        ^ expression.ng
#         ^^^^^ expression.ng variable.other.readwrite.ts
#              ^ expression.ng
#               ^^ expression.ng keyword.operator.expression.of.ts
#                 ^ expression.ng
#                  ^^^^^^ expression.ng variable.other.readwrite.ts
#                        ^ expression.ng meta.brace.round.ts
#                         ^ expression.ng
#                          ^ expression.ng keyword.operator.logical.ts
#                           ^ expression.ng
#                            ^^^^^ expression.ng entity.name.function.pipe.ng
#                                 ^ expression.ng meta.brace.round.ts
#                                  ^ expression.ng
#                                   ^ expression.ng keyword.operator.logical.ts
#                                    ^ expression.ng
#                                     ^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                              ^^^^ expression.ng
>
><!-- Mixed -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng
#           ^^ expression.ng keyword.operator.decrement.ts
#             ^ expression.ng keyword.operator.relational.ts
>{{ (let param of params?.get('value')!.property | async).anotherProperty | translate: ['language1', 'language2']; index as i }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng punctuation.accessor.ts
#                        ^ expression.ng punctuation.accessor.ts
#                         ^^^ expression.ng entity.name.function.ts
#                            ^ expression.ng meta.brace.round.ts
#                             ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                              ^^^^^ expression.ng string.quoted.single.ts
#                                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ expression.ng meta.brace.round.ts
#                                     ^ expression.ng keyword.operator.logical.ts
#                                      ^ expression.ng punctuation.accessor.ts
#                                       ^^^^^^^^ expression.ng variable.other.property.ts
#                                               ^ expression.ng
#                                                ^ expression.ng keyword.operator.logical.ts
#                                                 ^ expression.ng
#                                                  ^^^^^ expression.ng entity.name.function.pipe.ng
#                                                       ^ expression.ng meta.brace.round.ts
#                                                        ^ expression.ng punctuation.accessor.ts
#                                                         ^^^^^^^^^^^^^^^ expression.ng variable.other.property.ts
#                                                                        ^ expression.ng
#                                                                         ^ expression.ng keyword.operator.logical.ts
#                                                                          ^ expression.ng
#                                                                           ^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                                                                    ^^ expression.ng
#                                                                                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                       ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                        ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                 ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                  ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                                                   ^ expression.ng meta.array.literal.ts
#                                                                                                    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                                     ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                              ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                                                ^^ expression.ng
#                                                                                                                  ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                                                       ^ expression.ng
#                                                                                                                        ^^ expression.ng storage.type.as.ts
#                                                                                                                          ^ expression.ng
#                                                                                                                           ^ expression.ng entity.name.type.ts
#                                                                                                                            ^ expression.ng
#                                                                                                                             ^^^ expression.ng
>{{ (let param of params?.anotherParam!.param().param | async) as p; let i = index; let first = first }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^^ expression.ng punctuation.accessor.ts
#                         ^^^^^^^^^^^^ expression.ng variable.other.property.ts
#                                     ^ expression.ng keyword.operator.logical.ts
#                                      ^ expression.ng punctuation.accessor.ts
#                                       ^^^^^ expression.ng entity.name.function.ts
#                                            ^ expression.ng meta.brace.round.ts
#                                             ^ expression.ng meta.brace.round.ts
#                                              ^ expression.ng punctuation.accessor.ts
#                                               ^^^^^ expression.ng variable.other.property.ts
#                                                    ^ expression.ng
#                                                     ^ expression.ng keyword.operator.logical.ts
#                                                      ^ expression.ng
#                                                       ^^^^^ expression.ng entity.name.function.pipe.ng
#                                                            ^ expression.ng meta.brace.round.ts
#                                                             ^ expression.ng
#                                                              ^^ expression.ng storage.type.as.ts
#                                                                ^ expression.ng
#                                                                 ^ expression.ng entity.name.type.ts
#                                                                  ^^ expression.ng
#                                                                    ^^^ expression.ng storage.type.ts
#                                                                       ^ expression.ng
#                                                                        ^ expression.ng variable.other.readwrite.ts
#                                                                         ^ expression.ng
#                                                                          ^ expression.ng keyword.operator.assignment.ts
#                                                                           ^ expression.ng
#                                                                            ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                 ^^ expression.ng
#                                                                                   ^^^ expression.ng storage.type.ts
#                                                                                      ^ expression.ng
#                                                                                       ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                            ^ expression.ng
#                                                                                             ^ expression.ng keyword.operator.assignment.ts
#                                                                                              ^ expression.ng
#                                                                                               ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                                    ^^^^ expression.ng
>{{ (let param of params?.get('value')!.property | async).anotherProperty | translate: ['language1', 'language2']; let i = index; }}
#^^^ expression.ng
#   ^ expression.ng meta.brace.round.ts
#    ^^^ expression.ng storage.type.ts
#       ^ expression.ng
#        ^^^^^ expression.ng variable.other.readwrite.ts
#             ^ expression.ng
#              ^^ expression.ng keyword.operator.expression.of.ts
#                ^ expression.ng
#                 ^^^^^^ expression.ng variable.other.readwrite.ts
#                       ^ expression.ng punctuation.accessor.ts
#                        ^ expression.ng punctuation.accessor.ts
#                         ^^^ expression.ng entity.name.function.ts
#                            ^ expression.ng meta.brace.round.ts
#                             ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                              ^^^^^ expression.ng string.quoted.single.ts
#                                   ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ expression.ng meta.brace.round.ts
#                                     ^ expression.ng keyword.operator.logical.ts
#                                      ^ expression.ng punctuation.accessor.ts
#                                       ^^^^^^^^ expression.ng variable.other.property.ts
#                                               ^ expression.ng
#                                                ^ expression.ng keyword.operator.logical.ts
#                                                 ^ expression.ng
#                                                  ^^^^^ expression.ng entity.name.function.pipe.ng
#                                                       ^ expression.ng meta.brace.round.ts
#                                                        ^ expression.ng punctuation.accessor.ts
#                                                         ^^^^^^^^^^^^^^^ expression.ng variable.other.property.ts
#                                                                        ^ expression.ng
#                                                                         ^ expression.ng keyword.operator.logical.ts
#                                                                          ^ expression.ng
#                                                                           ^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                                                                    ^^ expression.ng
#                                                                                      ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                       ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                        ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                 ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                  ^ expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                                                   ^ expression.ng meta.array.literal.ts
#                                                                                                    ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                                     ^^^^^^^^^ expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                              ^ expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                               ^ expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                                                ^^ expression.ng
#                                                                                                                  ^^^ expression.ng storage.type.ts
#                                                                                                                     ^ expression.ng
#                                                                                                                      ^ expression.ng variable.other.readwrite.ts
#                                                                                                                       ^ expression.ng
#                                                                                                                        ^ expression.ng keyword.operator.assignment.ts
#                                                                                                                         ^ expression.ng
#                                                                                                                          ^^^^^ expression.ng variable.other.readwrite.ts
#                                                                                                                               ^^^^^ expression.ng
>
><!-- Regression -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^ expression.ng
#     ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#               ^ expression.ng
#                ^^ expression.ng keyword.operator.decrement.ts
#                  ^ expression.ng keyword.operator.relational.ts
><!-- #575 -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^^ expression.ng
#      ^^^ expression.ng constant.numeric.decimal.ts
#         ^ expression.ng
#          ^^ expression.ng keyword.operator.decrement.ts
#            ^ expression.ng keyword.operator.relational.ts
><div *ngFor="let n of nums; index as i"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^ expression.ng variable.other.readwrite.ts
#           ^ expression.ng keyword.operator.assignment.ts
#            ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^^^^^^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                                      ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                       ^ expression.ng keyword.operator.relational.ts
<<<<<<< HEAD
>    {{ 'GENERAL.COST_CODE' | translate }}
#^^^^^^^ expression.ng
#       ^ expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#        ^^^^^^^^^^^^^^^^^ expression.ng string.quoted.single.ts
#                         ^ expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                          ^ expression.ng
<<<<<<< HEAD
#                           ^^ expression.ng keyword.operator.logical.ts
#                             ^ expression.ng
#                              ^ expression.ng keyword.operator.logical.ts
#                               ^ expression.ng keyword.operator.logical.ts
#                                ^^^^^ expression.ng variable.other.readwrite.ts
#                                     ^^^^ expression.ng
>>>>>>> Improved tests cases
>
=======
#                           ^ expression.ng keyword.operator.logical.ts
#                            ^ expression.ng
#                             ^^^^^^^^^ expression.ng entity.name.function.pipe.ng
#                                      ^^^^ expression.ng
>  </th>
#^^ expression.ng
#  ^ expression.ng keyword.operator.relational.ts
#   ^ expression.ng keyword.operator.arithmetic.ts
#    ^^ expression.ng variable.other.readwrite.ts
#      ^ expression.ng keyword.operator.relational.ts
>  <td mat-cell *matCellDef="let param">{{ param.postCode?.name }}</td>
#^^ expression.ng
#  ^ expression.ng keyword.operator.relational.ts
#   ^^ expression.ng variable.other.readwrite.ts
#     ^ expression.ng
#      ^^^ expression.ng variable.other.readwrite.ts
#         ^ expression.ng keyword.operator.arithmetic.ts
#          ^^^^ expression.ng variable.other.readwrite.ts
#              ^ expression.ng
#               ^ expression.ng keyword.operator.arithmetic.ts
#                ^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                          ^ expression.ng keyword.operator.assignment.ts
#                           ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#                            ^^^^^^^^^ expression.ng string.quoted.double.ts
#                                     ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                                      ^ expression.ng keyword.operator.relational.ts
#                                       ^^^ expression.ng
#                                          ^^^^^ expression.ng variable.other.object.ts
#                                               ^ expression.ng punctuation.accessor.ts
#                                                ^^^^^^^^ expression.ng variable.other.property.ts
#                                                        ^^ expression.ng punctuation.accessor.ts
#                                                          ^^^^ expression.ng variable.other.property.ts
#                                                              ^^^ expression.ng
#                                                                 ^ expression.ng keyword.operator.relational.ts
#                                                                  ^ expression.ng keyword.operator.arithmetic.ts
#                                                                   ^^ expression.ng variable.other.readwrite.ts
#                                                                     ^ expression.ng keyword.operator.relational.ts
></ng-container>
=======
#                                        ^ expression.ng keyword.operator.relational.ts
#                                         ^ expression.ng keyword.operator.arithmetic.ts
#                                          ^^^ expression.ng variable.other.readwrite.ts
#                                             ^ expression.ng keyword.operator.relational.ts
><div *matHeaderCellDef></div>
>>>>>>> fixup! Added template expression support
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^^^^^^^^^^^^^ expression.ng variable.other.readwrite.ts
#                      ^ expression.ng keyword.operator.relational.ts
#                       ^ expression.ng keyword.operator.relational.ts
#                        ^ expression.ng keyword.operator.arithmetic.ts
#                         ^^^ expression.ng variable.other.readwrite.ts
#                            ^ expression.ng keyword.operator.relational.ts
><!-- #613 -->
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.logical.ts
#  ^^ expression.ng keyword.operator.decrement.ts
#    ^^ expression.ng
#      ^^^ expression.ng constant.numeric.decimal.ts
#         ^ expression.ng
#          ^^ expression.ng keyword.operator.decrement.ts
#            ^ expression.ng keyword.operator.relational.ts
><div *ngIf="x$ | async as a"></div>
#^ expression.ng keyword.operator.relational.ts
# ^^^ expression.ng variable.other.readwrite.ts
#    ^ expression.ng
#     ^ expression.ng keyword.operator.arithmetic.ts
#      ^^^^ expression.ng variable.other.readwrite.ts
#          ^ expression.ng keyword.operator.assignment.ts
#           ^ expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#            ^^^^^^^^^^^^^^^ expression.ng string.quoted.double.ts
#                           ^ expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                            ^ expression.ng keyword.operator.relational.ts
<<<<<<< HEAD
>  <ul>
#^^ expression.ng
#  ^ expression.ng keyword.operator.relational.ts
#   ^^ expression.ng variable.other.readwrite.ts
#     ^ expression.ng keyword.operator.relational.ts
>
>  </ul>
#^^ expression.ng
#  ^ expression.ng keyword.operator.relational.ts
#   ^ expression.ng keyword.operator.arithmetic.ts
#    ^^ expression.ng variable.other.readwrite.ts
#      ^ expression.ng keyword.operator.relational.ts
></div>
#^ expression.ng keyword.operator.relational.ts
# ^ expression.ng keyword.operator.arithmetic.ts
#  ^^^ expression.ng variable.other.readwrite.ts
#     ^ expression.ng keyword.operator.relational.ts
>>>>>>> Improved tests cases
=======
#                             ^ expression.ng keyword.operator.relational.ts
#                              ^ expression.ng keyword.operator.arithmetic.ts
#                               ^^^ expression.ng variable.other.readwrite.ts
#                                  ^ expression.ng keyword.operator.relational.ts
>
>>>>>>> fixup! Added template expression support
