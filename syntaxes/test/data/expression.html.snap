><!-- Data types -->
#^^^^^^^^^^^^^^^^^^^^ template.ng
>{{ variable }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#           ^ template.ng expression.ng
#            ^^ template.ng punctuation.definition.block.ts
>{{ 'string' }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#    ^^^^^^ template.ng expression.ng string.quoted.single.ts
#          ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#           ^ template.ng expression.ng
#            ^^ template.ng punctuation.definition.block.ts
>{{ "string" }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#    ^^^^^^ template.ng expression.ng string.quoted.double.ts
#          ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#           ^ template.ng expression.ng
#            ^^ template.ng punctuation.definition.block.ts
>{{ 1 }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng constant.numeric.decimal.ts
#    ^ template.ng expression.ng
#     ^^ template.ng punctuation.definition.block.ts
>{{ true }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng constant.language.boolean.true.ts
#       ^ template.ng expression.ng
#        ^^ template.ng punctuation.definition.block.ts
>{{ false }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^ template.ng expression.ng constant.language.boolean.false.ts
#        ^ template.ng expression.ng
#         ^^ template.ng punctuation.definition.block.ts
>{{ null }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng constant.language.null.ts
#       ^ template.ng expression.ng
#        ^^ template.ng punctuation.definition.block.ts
>{{ this }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng variable.language.this.ts
#       ^ template.ng expression.ng
#        ^^ template.ng punctuation.definition.block.ts
>{{ undefined }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng constant.language.undefined.ts
#            ^ template.ng expression.ng
#             ^^ template.ng punctuation.definition.block.ts
>{{ [variable, variable] }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^^^^^^^^ template.ng expression.ng meta.array.literal.ts variable.other.readwrite.ts
#            ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#             ^ template.ng expression.ng meta.array.literal.ts
#              ^^^^^^^^ template.ng expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                      ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                       ^ template.ng expression.ng
#                        ^^ template.ng punctuation.definition.block.ts
>{{ ['string', 'string'] }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#     ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#           ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#            ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#             ^ template.ng expression.ng meta.array.literal.ts
#              ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#               ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                     ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                      ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                       ^ template.ng expression.ng
#                        ^^ template.ng punctuation.definition.block.ts
>{{ ["string", "string"] }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#     ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts
#           ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#            ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#             ^ template.ng expression.ng meta.array.literal.ts
#              ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#               ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts
#                     ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                      ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                       ^ template.ng expression.ng
#                        ^^ template.ng punctuation.definition.block.ts
>{{ [1, 2] }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^ template.ng expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#     ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#      ^ template.ng expression.ng meta.array.literal.ts
#       ^ template.ng expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#        ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#         ^ template.ng expression.ng
#          ^^ template.ng punctuation.definition.block.ts
>{{ [true, false, null, this, undefined] }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#    ^^^^ template.ng expression.ng meta.array.literal.ts constant.language.boolean.true.ts
#        ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#         ^ template.ng expression.ng meta.array.literal.ts
#          ^^^^^ template.ng expression.ng meta.array.literal.ts constant.language.boolean.false.ts
#               ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                ^ template.ng expression.ng meta.array.literal.ts
#                 ^^^^ template.ng expression.ng meta.array.literal.ts constant.language.null.ts
#                     ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ template.ng expression.ng meta.array.literal.ts
#                       ^^^^ template.ng expression.ng meta.array.literal.ts variable.language.this.ts
#                           ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                            ^ template.ng expression.ng meta.array.literal.ts
#                             ^^^^^^^^^ template.ng expression.ng meta.array.literal.ts constant.language.undefined.ts
#                                      ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                       ^ template.ng expression.ng
#                                        ^^ template.ng punctuation.definition.block.ts
>{{ {object: variable} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                    ^^ template.ng expression.ng
#                      ^^ template.ng punctuation.definition.block.ts
>{{ {object: 'string'} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#             ^^^^^^ template.ng expression.ng string.quoted.single.ts
#                   ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                    ^^ template.ng expression.ng
#                      ^^ template.ng punctuation.definition.block.ts
>{{ {object: "string"} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#             ^^^^^^ template.ng expression.ng string.quoted.double.ts
#                   ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^^ template.ng expression.ng
#                      ^^ template.ng punctuation.definition.block.ts
>{{ {object: 1} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng constant.numeric.decimal.ts
#             ^^ template.ng expression.ng
#               ^^ template.ng punctuation.definition.block.ts
>{{ {object: true} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^^^^ template.ng expression.ng constant.language.boolean.true.ts
#                ^^ template.ng expression.ng
#                  ^^ template.ng punctuation.definition.block.ts
>{{ {object: false} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^^^^^ template.ng expression.ng constant.language.boolean.false.ts
#                 ^^ template.ng expression.ng
#                   ^^ template.ng punctuation.definition.block.ts
>{{ {object: null} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^^^^ template.ng expression.ng constant.language.null.ts
#                ^^ template.ng expression.ng
#                  ^^ template.ng punctuation.definition.block.ts
>{{ {object: this} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^^^^ template.ng expression.ng variable.language.this.ts
#                ^^ template.ng expression.ng
#                  ^^ template.ng punctuation.definition.block.ts
>{{ {object: undefined} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^^^^^^^^^ template.ng expression.ng constant.language.undefined.ts
#                     ^^ template.ng expression.ng
#                       ^^ template.ng punctuation.definition.block.ts
>{{ {object: [variable, variable]} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^^^^^^^^ template.ng expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                     ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ template.ng expression.ng meta.array.literal.ts
#                       ^^^^^^^^ template.ng expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                ^^ template.ng expression.ng
#                                  ^^ template.ng punctuation.definition.block.ts
>{{ {object: ['string', 'string']} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#              ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                    ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ template.ng expression.ng meta.array.literal.ts
#                       ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                        ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                              ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                ^^ template.ng expression.ng
#                                  ^^ template.ng punctuation.definition.block.ts
>{{ {object: ["string", "string"]} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#              ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts
#                    ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                     ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                      ^ template.ng expression.ng meta.array.literal.ts
#                       ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#                        ^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts
#                              ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                ^^ template.ng expression.ng
#                                  ^^ template.ng punctuation.definition.block.ts
>{{ {object: [1, 2]} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^ template.ng expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#              ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#               ^ template.ng expression.ng meta.array.literal.ts
#                ^ template.ng expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                 ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                  ^^ template.ng expression.ng
#                    ^^ template.ng punctuation.definition.block.ts
>{{ {object: [true, false, null, this, undefined]} }}
#^^ template.ng punctuation.definition.block.ts
#  ^^ template.ng expression.ng
#    ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#          ^^ template.ng expression.ng
#            ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#             ^^^^ template.ng expression.ng meta.array.literal.ts constant.language.boolean.true.ts
#                 ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                  ^ template.ng expression.ng meta.array.literal.ts
#                   ^^^^^ template.ng expression.ng meta.array.literal.ts constant.language.boolean.false.ts
#                        ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                         ^ template.ng expression.ng meta.array.literal.ts
#                          ^^^^ template.ng expression.ng meta.array.literal.ts constant.language.null.ts
#                              ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                               ^ template.ng expression.ng meta.array.literal.ts
#                                ^^^^ template.ng expression.ng meta.array.literal.ts variable.language.this.ts
#                                    ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                     ^ template.ng expression.ng meta.array.literal.ts
#                                      ^^^^^^^^^ template.ng expression.ng meta.array.literal.ts constant.language.undefined.ts
#                                               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                ^^ template.ng expression.ng
#                                                  ^^ template.ng punctuation.definition.block.ts
>
><!-- Property read and method call: implicit -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
>{{ call() }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^ template.ng expression.ng
#          ^^ template.ng punctuation.definition.block.ts
>{{ call(); }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^^ template.ng expression.ng
#           ^^ template.ng punctuation.definition.block.ts
>{{ call().object }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^^^^^^ template.ng expression.ng variable.other.property.ts
#                ^ template.ng expression.ng
#                 ^^ template.ng punctuation.definition.block.ts
>{{ call().object; }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^^^^^^ template.ng expression.ng variable.other.property.ts
#                ^^ template.ng expression.ng
#                  ^^ template.ng punctuation.definition.block.ts
>{{ call()?.conditional }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                      ^ template.ng expression.ng
#                       ^^ template.ng punctuation.definition.block.ts
>{{ call()?.conditional; }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                      ^^ template.ng expression.ng
#                        ^^ template.ng punctuation.definition.block.ts
>{{ call()!.conditional }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^ template.ng expression.ng keyword.operator.logical.ts
#          ^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                      ^ template.ng expression.ng
#                       ^^ template.ng punctuation.definition.block.ts
>{{ call()!.conditional; }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.brace.round.ts
#         ^ template.ng expression.ng keyword.operator.logical.ts
#          ^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                      ^^ template.ng expression.ng
#                        ^^ template.ng punctuation.definition.block.ts
>
><!-- Property read and method call: received -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
>{{ object.call() }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.object.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^^^^ template.ng expression.ng entity.name.function.ts
#              ^ template.ng expression.ng meta.brace.round.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^ template.ng expression.ng
#                 ^^ template.ng punctuation.definition.block.ts
>{{ object.call(); }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.object.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^^^^ template.ng expression.ng entity.name.function.ts
#              ^ template.ng expression.ng meta.brace.round.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^^ template.ng expression.ng
#                  ^^ template.ng punctuation.definition.block.ts
>{{ object.call().object }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.object.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^^^^ template.ng expression.ng entity.name.function.ts
#              ^ template.ng expression.ng meta.brace.round.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^ template.ng expression.ng punctuation.accessor.ts
#                 ^^^^^^ template.ng expression.ng variable.other.property.ts
#                       ^ template.ng expression.ng
#                        ^^ template.ng punctuation.definition.block.ts
>{{ object.call().object; }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.object.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^^^^ template.ng expression.ng entity.name.function.ts
#              ^ template.ng expression.ng meta.brace.round.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^ template.ng expression.ng punctuation.accessor.ts
#                 ^^^^^^ template.ng expression.ng variable.other.property.ts
#                       ^^ template.ng expression.ng
#                         ^^ template.ng punctuation.definition.block.ts
>{{ object?.call()?.conditional }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^ template.ng expression.ng entity.name.function.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^ template.ng expression.ng meta.brace.round.ts
#                 ^^ template.ng expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                              ^ template.ng expression.ng
#                               ^^ template.ng punctuation.definition.block.ts
>{{ object?.call()?.conditional; }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#         ^ template.ng expression.ng punctuation.accessor.ts
#          ^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^ template.ng expression.ng entity.name.function.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^ template.ng expression.ng meta.brace.round.ts
#                 ^^ template.ng expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                              ^^ template.ng expression.ng
#                                ^^ template.ng punctuation.definition.block.ts
>{{ object!.call()!.conditional }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#         ^ template.ng expression.ng keyword.operator.logical.ts
#          ^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^ template.ng expression.ng entity.name.function.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^ template.ng expression.ng meta.brace.round.ts
#                 ^ template.ng expression.ng keyword.operator.logical.ts
#                  ^ template.ng expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                              ^ template.ng expression.ng
#                               ^^ template.ng punctuation.definition.block.ts
>{{ object!.call()!.conditional; }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#         ^ template.ng expression.ng keyword.operator.logical.ts
#          ^ template.ng expression.ng punctuation.accessor.ts
#           ^^^^ template.ng expression.ng entity.name.function.ts
#               ^ template.ng expression.ng meta.brace.round.ts
#                ^ template.ng expression.ng meta.brace.round.ts
#                 ^ template.ng expression.ng keyword.operator.logical.ts
#                  ^ template.ng expression.ng punctuation.accessor.ts
#                   ^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                              ^^ template.ng expression.ng
#                                ^^ template.ng punctuation.definition.block.ts
>
><!-- Method call with parameters -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
>{{ call(withParams) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                  ^ template.ng expression.ng meta.brace.round.ts
#                   ^ template.ng expression.ng
#                    ^^ template.ng punctuation.definition.block.ts
>{{ call('withParams') }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ template.ng expression.ng string.quoted.single.ts
#                   ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                    ^ template.ng expression.ng meta.brace.round.ts
#                     ^ template.ng expression.ng
#                      ^^ template.ng punctuation.definition.block.ts
>{{ call("withParams") }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ template.ng expression.ng string.quoted.double.ts
#                   ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^ template.ng expression.ng meta.brace.round.ts
#                     ^ template.ng expression.ng
#                      ^^ template.ng punctuation.definition.block.ts
>{{ call("withParams") }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^ template.ng expression.ng string.quoted.double.ts
#                   ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                    ^ template.ng expression.ng meta.brace.round.ts
#                     ^ template.ng expression.ng
#                      ^^ template.ng punctuation.definition.block.ts
>{{ call(false) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^^^^^ template.ng expression.ng constant.language.boolean.false.ts
#             ^ template.ng expression.ng meta.brace.round.ts
#              ^ template.ng expression.ng
#               ^^ template.ng punctuation.definition.block.ts
>{{ call(!!true) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng keyword.operator.logical.ts
#         ^ template.ng expression.ng keyword.operator.logical.ts
#          ^^^^ template.ng expression.ng constant.language.boolean.true.ts
#              ^ template.ng expression.ng meta.brace.round.ts
#               ^ template.ng expression.ng
#                ^^ template.ng punctuation.definition.block.ts
>{{ call(["array", 123]) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#         ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#          ^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts
#               ^ template.ng expression.ng meta.array.literal.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                 ^ template.ng expression.ng meta.array.literal.ts
#                  ^^^ template.ng expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                     ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                      ^ template.ng expression.ng meta.brace.round.ts
#                       ^ template.ng expression.ng
#                        ^^ template.ng punctuation.definition.block.ts
>{{ call(1) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^ template.ng expression.ng constant.numeric.decimal.ts
#         ^ template.ng expression.ng meta.brace.round.ts
#          ^ template.ng expression.ng
#           ^^ template.ng punctuation.definition.block.ts
>{{ call({ test: 'object' }) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^^ template.ng expression.ng
#          ^^^^ template.ng expression.ng variable.other.readwrite.ts
#              ^^ template.ng expression.ng
#                ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                 ^^^^^^ template.ng expression.ng string.quoted.single.ts
#                       ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                        ^^ template.ng expression.ng
#                          ^ template.ng expression.ng meta.brace.round.ts
#                           ^ template.ng expression.ng
#                            ^^ template.ng punctuation.definition.block.ts
>{{ call({ test: 123 }) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^^ template.ng expression.ng
#          ^^^^ template.ng expression.ng variable.other.readwrite.ts
#              ^^ template.ng expression.ng
#                ^^^ template.ng expression.ng constant.numeric.decimal.ts
#                   ^^ template.ng expression.ng
#                     ^ template.ng expression.ng meta.brace.round.ts
#                      ^ template.ng expression.ng
#                       ^^ template.ng punctuation.definition.block.ts
>{{ call({ test: [123, 321, { value: ['string', false, true] }] }) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^ template.ng expression.ng entity.name.function.ts
#       ^ template.ng expression.ng meta.brace.round.ts
#        ^^ template.ng expression.ng
#          ^^^^ template.ng expression.ng variable.other.readwrite.ts
#              ^^ template.ng expression.ng
#                ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                 ^^^ template.ng expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                    ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                     ^ template.ng expression.ng meta.array.literal.ts
#                      ^^^ template.ng expression.ng meta.array.literal.ts constant.numeric.decimal.ts
#                         ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                          ^^^ template.ng expression.ng meta.array.literal.ts
#                             ^^^^^ template.ng expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                  ^^ template.ng expression.ng meta.array.literal.ts
#                                    ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                                     ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                      ^^^^^^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts
#                                            ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                             ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts punctuation.separator.comma.ts
#                                              ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts
#                                               ^^^^^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts constant.language.boolean.false.ts
#                                                    ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts punctuation.separator.comma.ts
#                                                     ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts
#                                                      ^^^^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts constant.language.boolean.true.ts
#                                                          ^ template.ng expression.ng meta.array.literal.ts meta.array.literal.ts meta.brace.square.ts
#                                                           ^^ template.ng expression.ng meta.array.literal.ts
#                                                             ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                              ^^ template.ng expression.ng
#                                                                ^ template.ng expression.ng meta.brace.round.ts
#                                                                 ^ template.ng expression.ng
#                                                                  ^^ template.ng punctuation.definition.block.ts
>
><!-- Nullish coalesce -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
>{{a ?? 'empty'}}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng variable.other.readwrite.ts
#   ^ template.ng expression.ng
#    ^^ template.ng expression.ng keyword.operator.logical.ts
#      ^ template.ng expression.ng
#       ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#        ^^^^^ template.ng expression.ng string.quoted.single.ts
#             ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#              ^^ template.ng punctuation.definition.block.ts
>
><!-- Ternary expression -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
>{{ condition ? true : false }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^ template.ng expression.ng
#             ^ template.ng expression.ng keyword.operator.ternary.ts
#              ^ template.ng expression.ng
#               ^^^^ template.ng expression.ng constant.language.boolean.true.ts
#                   ^ template.ng expression.ng
#                    ^ template.ng expression.ng keyword.operator.ternary.ts
#                     ^ template.ng expression.ng
#                      ^^^^^ template.ng expression.ng constant.language.boolean.false.ts
#                           ^ template.ng expression.ng
#                            ^^ template.ng punctuation.definition.block.ts
>{{ condition ? true : false; }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^ template.ng expression.ng
#             ^ template.ng expression.ng keyword.operator.ternary.ts
#              ^ template.ng expression.ng
#               ^^^^ template.ng expression.ng constant.language.boolean.true.ts
#                   ^ template.ng expression.ng
#                    ^ template.ng expression.ng keyword.operator.ternary.ts
#                     ^ template.ng expression.ng
#                      ^^^^^ template.ng expression.ng constant.language.boolean.false.ts
#                           ^^ template.ng expression.ng
#                             ^^ template.ng punctuation.definition.block.ts
>{{ condition() ? call(1 + 2 + 3) : call() }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng entity.name.function.ts
#            ^ template.ng expression.ng meta.brace.round.ts
#             ^ template.ng expression.ng meta.brace.round.ts
#              ^ template.ng expression.ng
#               ^ template.ng expression.ng keyword.operator.ternary.ts
#                ^ template.ng expression.ng
#                 ^^^^ template.ng expression.ng entity.name.function.ts
#                     ^ template.ng expression.ng meta.brace.round.ts
#                      ^ template.ng expression.ng constant.numeric.decimal.ts
#                       ^ template.ng expression.ng
#                        ^ template.ng expression.ng keyword.operator.arithmetic.ts
#                         ^ template.ng expression.ng
#                          ^ template.ng expression.ng constant.numeric.decimal.ts
#                           ^ template.ng expression.ng
#                            ^ template.ng expression.ng keyword.operator.arithmetic.ts
#                             ^ template.ng expression.ng
#                              ^ template.ng expression.ng constant.numeric.decimal.ts
#                               ^ template.ng expression.ng meta.brace.round.ts
#                                ^ template.ng expression.ng
#                                 ^ template.ng expression.ng keyword.operator.ternary.ts
#                                  ^ template.ng expression.ng
#                                   ^^^^ template.ng expression.ng entity.name.function.ts
#                                       ^ template.ng expression.ng meta.brace.round.ts
#                                        ^ template.ng expression.ng meta.brace.round.ts
#                                         ^ template.ng expression.ng
#                                          ^^ template.ng punctuation.definition.block.ts
>{{ condition() ? call(1 + 2 + 3) : call(); }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng entity.name.function.ts
#            ^ template.ng expression.ng meta.brace.round.ts
#             ^ template.ng expression.ng meta.brace.round.ts
#              ^ template.ng expression.ng
#               ^ template.ng expression.ng keyword.operator.ternary.ts
#                ^ template.ng expression.ng
#                 ^^^^ template.ng expression.ng entity.name.function.ts
#                     ^ template.ng expression.ng meta.brace.round.ts
#                      ^ template.ng expression.ng constant.numeric.decimal.ts
#                       ^ template.ng expression.ng
#                        ^ template.ng expression.ng keyword.operator.arithmetic.ts
#                         ^ template.ng expression.ng
#                          ^ template.ng expression.ng constant.numeric.decimal.ts
#                           ^ template.ng expression.ng
#                            ^ template.ng expression.ng keyword.operator.arithmetic.ts
#                             ^ template.ng expression.ng
#                              ^ template.ng expression.ng constant.numeric.decimal.ts
#                               ^ template.ng expression.ng meta.brace.round.ts
#                                ^ template.ng expression.ng
#                                 ^ template.ng expression.ng keyword.operator.ternary.ts
#                                  ^ template.ng expression.ng
#                                   ^^^^ template.ng expression.ng entity.name.function.ts
#                                       ^ template.ng expression.ng meta.brace.round.ts
#                                        ^ template.ng expression.ng meta.brace.round.ts
#                                         ^^ template.ng expression.ng
#                                           ^^ template.ng punctuation.definition.block.ts
>{{ condition()?.object ? call()!.test() : false }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng entity.name.function.ts
#            ^ template.ng expression.ng meta.brace.round.ts
#             ^ template.ng expression.ng meta.brace.round.ts
#              ^^ template.ng expression.ng punctuation.accessor.ts
#                ^^^^^^ template.ng expression.ng variable.other.property.ts
#                      ^ template.ng expression.ng
#                       ^ template.ng expression.ng keyword.operator.ternary.ts
#                        ^ template.ng expression.ng
#                         ^^^^ template.ng expression.ng entity.name.function.ts
#                             ^ template.ng expression.ng meta.brace.round.ts
#                              ^ template.ng expression.ng meta.brace.round.ts
#                               ^ template.ng expression.ng keyword.operator.logical.ts
#                                ^ template.ng expression.ng punctuation.accessor.ts
#                                 ^^^^ template.ng expression.ng entity.name.function.ts
#                                     ^ template.ng expression.ng meta.brace.round.ts
#                                      ^ template.ng expression.ng meta.brace.round.ts
#                                       ^ template.ng expression.ng
#                                        ^ template.ng expression.ng keyword.operator.ternary.ts
#                                         ^ template.ng expression.ng
#                                          ^^^^^ template.ng expression.ng constant.language.boolean.false.ts
#                                               ^ template.ng expression.ng
#                                                ^^ template.ng punctuation.definition.block.ts
>{{ condition ? ['123'] : { test: 'a' } }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^ template.ng expression.ng
#             ^ template.ng expression.ng keyword.operator.ternary.ts
#              ^ template.ng expression.ng
#               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                 ^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                    ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                      ^ template.ng expression.ng
#                       ^ template.ng expression.ng keyword.operator.ternary.ts
#                        ^^^ template.ng expression.ng
#                           ^^^^ template.ng expression.ng variable.other.readwrite.ts
#                               ^^ template.ng expression.ng
#                                 ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                  ^ template.ng expression.ng string.quoted.single.ts
#                                   ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^^^ template.ng expression.ng
#                                       ^^ template.ng punctuation.definition.block.ts
>{{ condition ? 'test' : "test" }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^ template.ng expression.ng
#             ^ template.ng expression.ng keyword.operator.ternary.ts
#              ^ template.ng expression.ng
#               ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                ^^^^ template.ng expression.ng string.quoted.single.ts
#                    ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                     ^ template.ng expression.ng
#                      ^ template.ng expression.ng keyword.operator.ternary.ts
#                       ^ template.ng expression.ng
#                        ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.begin.ts
#                         ^^^^ template.ng expression.ng string.quoted.double.ts
#                             ^ template.ng expression.ng string.quoted.double.ts punctuation.definition.string.end.ts
#                              ^ template.ng expression.ng
#                               ^^ template.ng punctuation.definition.block.ts
>{{ condition ? [function(), variable] : {} }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^ template.ng expression.ng
#             ^ template.ng expression.ng keyword.operator.ternary.ts
#              ^ template.ng expression.ng
#               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                ^^^^^^^^ template.ng expression.ng meta.array.literal.ts entity.name.function.ts
#                        ^ template.ng expression.ng meta.array.literal.ts meta.brace.round.ts
#                         ^ template.ng expression.ng meta.array.literal.ts meta.brace.round.ts
#                          ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                           ^ template.ng expression.ng meta.array.literal.ts
#                            ^^^^^^^^ template.ng expression.ng meta.array.literal.ts variable.other.readwrite.ts
#                                    ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                     ^ template.ng expression.ng
#                                      ^ template.ng expression.ng keyword.operator.ternary.ts
#                                       ^^^^ template.ng expression.ng
#                                           ^^ template.ng punctuation.definition.block.ts
>{{ condition ? condition2 ? condition3 ? 1 : 2 : 3 : 4 }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^ template.ng expression.ng
#             ^ template.ng expression.ng keyword.operator.ternary.ts
#              ^ template.ng expression.ng
#               ^^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                         ^ template.ng expression.ng
#                          ^ template.ng expression.ng keyword.operator.ternary.ts
#                           ^ template.ng expression.ng
#                            ^^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                                      ^ template.ng expression.ng
#                                       ^ template.ng expression.ng keyword.operator.ternary.ts
#                                        ^ template.ng expression.ng
#                                         ^ template.ng expression.ng constant.numeric.decimal.ts
#                                          ^ template.ng expression.ng
#                                           ^ template.ng expression.ng keyword.operator.ternary.ts
#                                            ^ template.ng expression.ng
#                                             ^ template.ng expression.ng constant.numeric.decimal.ts
#                                              ^ template.ng expression.ng
#                                               ^ template.ng expression.ng keyword.operator.ternary.ts
#                                                ^ template.ng expression.ng
#                                                 ^ template.ng expression.ng constant.numeric.decimal.ts
#                                                  ^ template.ng expression.ng
#                                                   ^ template.ng expression.ng keyword.operator.ternary.ts
#                                                    ^ template.ng expression.ng
#                                                     ^ template.ng expression.ng constant.numeric.decimal.ts
#                                                      ^ template.ng expression.ng
#                                                       ^^ template.ng punctuation.definition.block.ts
><!-- Don't match safe navigations -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
>{{ condition?.a : 1 }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^^ template.ng expression.ng punctuation.accessor.ts
#              ^ template.ng expression.ng variable.other.property.ts
#               ^^^ template.ng expression.ng
#                  ^ template.ng expression.ng constant.numeric.decimal.ts
#                   ^ template.ng expression.ng
#                    ^^ template.ng punctuation.definition.block.ts
><!-- Don't match nullish coalesce -->
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
>{{ condition ?? (a ? 1 : 2) }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#            ^ template.ng expression.ng
#             ^^ template.ng expression.ng keyword.operator.logical.ts
#               ^ template.ng expression.ng
#                ^ template.ng expression.ng meta.brace.round.ts
#                 ^ template.ng expression.ng variable.other.readwrite.ts
#                  ^ template.ng expression.ng
#                   ^ template.ng expression.ng keyword.operator.ternary.ts
#                    ^ template.ng expression.ng
#                     ^ template.ng expression.ng constant.numeric.decimal.ts
#                      ^ template.ng expression.ng
#                       ^ template.ng expression.ng keyword.operator.ternary.ts
#                        ^ template.ng expression.ng
#                         ^ template.ng expression.ng constant.numeric.decimal.ts
#                          ^ template.ng expression.ng meta.brace.round.ts
#                           ^ template.ng expression.ng
#                            ^^ template.ng punctuation.definition.block.ts
>
><!-- Microsyntax -->
#^^^^^^^^^^^^^^^^^^^^^ template.ng
><!-- Let Expression -->
#^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
><div *ngFor="let i = index;"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                  ^ template.ng meta.ng-binding.template.html expression.ng
#                   ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                    ^ template.ng meta.ng-binding.template.html expression.ng
#                     ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                          ^ template.ng meta.ng-binding.template.html expression.ng
#                           ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                            ^^^^^^^^ template.ng
><div *ngFor="let i = index"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                  ^ template.ng meta.ng-binding.template.html expression.ng
#                   ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                    ^ template.ng meta.ng-binding.template.html expression.ng
#                     ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                          ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                           ^^^^^^^^ template.ng
><!-- Key Expression -->
#^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
><div *ngFor="let i = index; trackBy: hash;"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                  ^ template.ng meta.ng-binding.template.html expression.ng
#                   ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                    ^ template.ng meta.ng-binding.template.html expression.ng
#                     ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                          ^^ template.ng meta.ng-binding.template.html expression.ng
#                            ^^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                   ^^ template.ng meta.ng-binding.template.html expression.ng
#                                     ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                         ^ template.ng meta.ng-binding.template.html expression.ng
#                                          ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                           ^^^^^^^^ template.ng
><div *ngFor="let i = index; trackBy: hash"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                  ^ template.ng meta.ng-binding.template.html expression.ng
#                   ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                    ^ template.ng meta.ng-binding.template.html expression.ng
#                     ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                          ^^ template.ng meta.ng-binding.template.html expression.ng
#                            ^^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                   ^^ template.ng meta.ng-binding.template.html expression.ng
#                                     ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                         ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                          ^^^^^^^^ template.ng
><div *ngFor="let param of params;"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^ template.ng meta.ng-binding.template.html expression.ng
#                                 ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                  ^^^^^^^^ template.ng
><div *ngFor="let param of params"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                 ^^^^^^^^ template.ng
><!-- As Expression -->
#^^^^^^^^^^^^^^^^^^^^^^^ template.ng
><div *ngFor="let param of params; index as i;"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^^ template.ng meta.ng-binding.template.html expression.ng
#                                  ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                       ^ template.ng meta.ng-binding.template.html expression.ng
#                                        ^^ template.ng meta.ng-binding.template.html expression.ng storage.type.as.ts
#                                          ^ template.ng meta.ng-binding.template.html expression.ng
#                                           ^ template.ng meta.ng-binding.template.html expression.ng entity.name.type.ts
#                                            ^ template.ng meta.ng-binding.template.html expression.ng
#                                             ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                              ^^^^^^^^ template.ng
><div *ngFor="let param of params; index as i"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^^ template.ng meta.ng-binding.template.html expression.ng
#                                  ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                       ^ template.ng meta.ng-binding.template.html expression.ng
#                                        ^^ template.ng meta.ng-binding.template.html expression.ng storage.type.as.ts
#                                          ^ template.ng meta.ng-binding.template.html expression.ng
#                                           ^ template.ng meta.ng-binding.template.html expression.ng entity.name.type.ts
#                                            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                             ^^^^^^^^ template.ng
><!-- Mixed -->
#^^^^^^^^^^^^^^^ template.ng
><div *ngFor="let param of params; let i = index; let last = last"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^^ template.ng meta.ng-binding.template.html expression.ng
#                                  ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                                     ^ template.ng meta.ng-binding.template.html expression.ng
#                                      ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                       ^ template.ng meta.ng-binding.template.html expression.ng
#                                        ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                                         ^ template.ng meta.ng-binding.template.html expression.ng
#                                          ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                               ^^ template.ng meta.ng-binding.template.html expression.ng
#                                                 ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                                                    ^ template.ng meta.ng-binding.template.html expression.ng
#                                                     ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                                         ^ template.ng meta.ng-binding.template.html expression.ng
#                                                          ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                                                           ^ template.ng meta.ng-binding.template.html expression.ng
#                                                            ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                                                ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                                                 ^^^^^^^^ template.ng
><div *ngFor="let param of params; let i = index; let last = last;"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^^ template.ng meta.ng-binding.template.html expression.ng
#                                  ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                                     ^ template.ng meta.ng-binding.template.html expression.ng
#                                      ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                       ^ template.ng meta.ng-binding.template.html expression.ng
#                                        ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                                         ^ template.ng meta.ng-binding.template.html expression.ng
#                                          ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                               ^^ template.ng meta.ng-binding.template.html expression.ng
#                                                 ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                                                    ^ template.ng meta.ng-binding.template.html expression.ng
#                                                     ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                                         ^ template.ng meta.ng-binding.template.html expression.ng
#                                                          ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                                                           ^ template.ng meta.ng-binding.template.html expression.ng
#                                                            ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                                                ^ template.ng meta.ng-binding.template.html expression.ng
#                                                                 ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                                                  ^^^^^^^^ template.ng
><div *ngFor="let param of params; let i = index; last as last"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^^ template.ng meta.ng-binding.template.html expression.ng
#                                  ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                                     ^ template.ng meta.ng-binding.template.html expression.ng
#                                      ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                       ^ template.ng meta.ng-binding.template.html expression.ng
#                                        ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                                         ^ template.ng meta.ng-binding.template.html expression.ng
#                                          ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                               ^^ template.ng meta.ng-binding.template.html expression.ng
#                                                 ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                                     ^ template.ng meta.ng-binding.template.html expression.ng
#                                                      ^^ template.ng meta.ng-binding.template.html expression.ng storage.type.as.ts
#                                                        ^ template.ng meta.ng-binding.template.html expression.ng
#                                                         ^^^^ template.ng meta.ng-binding.template.html expression.ng entity.name.type.ts
#                                                             ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                                              ^^^^^^^^ template.ng
><div *ngFor="let param of params; let i = index; last as last;"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                ^^ template.ng meta.ng-binding.template.html expression.ng
#                                  ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                                     ^ template.ng meta.ng-binding.template.html expression.ng
#                                      ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                       ^ template.ng meta.ng-binding.template.html expression.ng
#                                        ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.assignment.ts
#                                         ^ template.ng meta.ng-binding.template.html expression.ng
#                                          ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                               ^^ template.ng meta.ng-binding.template.html expression.ng
#                                                 ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                                     ^ template.ng meta.ng-binding.template.html expression.ng
#                                                      ^^ template.ng meta.ng-binding.template.html expression.ng storage.type.as.ts
#                                                        ^ template.ng meta.ng-binding.template.html expression.ng
#                                                         ^^^^ template.ng meta.ng-binding.template.html expression.ng entity.name.type.ts
#                                                             ^ template.ng meta.ng-binding.template.html expression.ng
#                                                              ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                                               ^^^^^^^^ template.ng
>
><!-- Pipes -->
#^^^^^^^^^^^^^^^ template.ng
>{{ (let param of params) | async }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.brace.round.ts
#    ^^^ template.ng expression.ng storage.type.ts
#       ^ template.ng expression.ng
#        ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#             ^ template.ng expression.ng
#              ^^ template.ng expression.ng keyword.operator.expression.of.ts
#                ^ template.ng expression.ng
#                 ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                       ^ template.ng expression.ng meta.brace.round.ts
#                        ^ template.ng expression.ng
#                         ^ template.ng expression.ng keyword.operator.logical.ts
#                          ^ template.ng expression.ng
#                           ^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                ^ template.ng expression.ng
#                                 ^^ template.ng punctuation.definition.block.ts
>{{ (let param of params) | trackBy: trackByMethod }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.brace.round.ts
#    ^^^ template.ng expression.ng storage.type.ts
#       ^ template.ng expression.ng
#        ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#             ^ template.ng expression.ng
#              ^^ template.ng expression.ng keyword.operator.expression.of.ts
#                ^ template.ng expression.ng
#                 ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                       ^ template.ng expression.ng meta.brace.round.ts
#                        ^ template.ng expression.ng
#                         ^ template.ng expression.ng keyword.operator.logical.ts
#                          ^ template.ng expression.ng
#                           ^^^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                  ^^ template.ng expression.ng
#                                    ^^^^^^^^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                                                 ^ template.ng expression.ng
#                                                  ^^ template.ng punctuation.definition.block.ts
>{{ (let param of params) | customPipe: 'param' | search: ['term1', 'term2'] }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.brace.round.ts
#    ^^^ template.ng expression.ng storage.type.ts
#       ^ template.ng expression.ng
#        ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#             ^ template.ng expression.ng
#              ^^ template.ng expression.ng keyword.operator.expression.of.ts
#                ^ template.ng expression.ng
#                 ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                       ^ template.ng expression.ng meta.brace.round.ts
#                        ^ template.ng expression.ng
#                         ^ template.ng expression.ng keyword.operator.logical.ts
#                          ^ template.ng expression.ng
#                           ^^^^^^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                     ^^ template.ng expression.ng
#                                       ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                                        ^^^^^ template.ng expression.ng string.quoted.single.ts
#                                             ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                              ^ template.ng expression.ng
#                                               ^ template.ng expression.ng keyword.operator.logical.ts
#                                                ^ template.ng expression.ng
#                                                 ^^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                                       ^^ template.ng expression.ng
#                                                         ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                          ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                           ^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                 ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                  ^ template.ng expression.ng meta.array.literal.ts
#                                                                   ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                    ^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                         ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                          ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                           ^ template.ng expression.ng
#                                                                            ^^ template.ng punctuation.definition.block.ts
>{{ ((let param of params) | async) | translate }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.brace.round.ts
#    ^ template.ng expression.ng meta.brace.round.ts
#     ^^^ template.ng expression.ng storage.type.ts
#        ^ template.ng expression.ng
#         ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#              ^ template.ng expression.ng
#               ^^ template.ng expression.ng keyword.operator.expression.of.ts
#                 ^ template.ng expression.ng
#                  ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                        ^ template.ng expression.ng meta.brace.round.ts
#                         ^ template.ng expression.ng
#                          ^ template.ng expression.ng keyword.operator.logical.ts
#                           ^ template.ng expression.ng
#                            ^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                 ^ template.ng expression.ng meta.brace.round.ts
#                                  ^ template.ng expression.ng
#                                   ^ template.ng expression.ng keyword.operator.logical.ts
#                                    ^ template.ng expression.ng
#                                     ^^^^^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                              ^ template.ng expression.ng
#                                               ^^ template.ng punctuation.definition.block.ts
>
><!-- Mixed -->
#^^^^^^^^^^^^^^^ template.ng
>{{ (let param of params?.get('value')!.property | async).anotherProperty | translate: ['language1', 'language2']; index
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.brace.round.ts
#    ^^^ template.ng expression.ng storage.type.ts
#       ^ template.ng expression.ng
#        ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#             ^ template.ng expression.ng
#              ^^ template.ng expression.ng keyword.operator.expression.of.ts
#                ^ template.ng expression.ng
#                 ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                       ^ template.ng expression.ng punctuation.accessor.ts
#                        ^ template.ng expression.ng punctuation.accessor.ts
#                         ^^^ template.ng expression.ng entity.name.function.ts
#                            ^ template.ng expression.ng meta.brace.round.ts
#                             ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                              ^^^^^ template.ng expression.ng string.quoted.single.ts
#                                   ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ template.ng expression.ng meta.brace.round.ts
#                                     ^ template.ng expression.ng keyword.operator.logical.ts
#                                      ^ template.ng expression.ng punctuation.accessor.ts
#                                       ^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                                               ^ template.ng expression.ng
#                                                ^ template.ng expression.ng keyword.operator.logical.ts
#                                                 ^ template.ng expression.ng
#                                                  ^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                                       ^ template.ng expression.ng meta.brace.round.ts
#                                                        ^ template.ng expression.ng punctuation.accessor.ts
#                                                         ^^^^^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                                                                        ^ template.ng expression.ng
#                                                                         ^ template.ng expression.ng keyword.operator.logical.ts
#                                                                          ^ template.ng expression.ng
#                                                                           ^^^^^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                                                                    ^^ template.ng expression.ng
#                                                                                      ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                       ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                        ^^^^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                 ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                  ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                                                   ^ template.ng expression.ng meta.array.literal.ts
#                                                                                                    ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                                     ^^^^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                              ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                                                ^^ template.ng expression.ng
#                                                                                                                  ^^^^^ template.ng expression.ng variable.other.readwrite.ts
>as i }}
#^^ template.ng expression.ng storage.type.as.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng entity.name.type.ts
#    ^ template.ng expression.ng
#     ^^ template.ng punctuation.definition.block.ts
>{{ (let param of params?.anotherParam!.param().param | async) as p; let i = index; let first = first }}
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.brace.round.ts
#    ^^^ template.ng expression.ng storage.type.ts
#       ^ template.ng expression.ng
#        ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#             ^ template.ng expression.ng
#              ^^ template.ng expression.ng keyword.operator.expression.of.ts
#                ^ template.ng expression.ng
#                 ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                       ^^ template.ng expression.ng punctuation.accessor.ts
#                         ^^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                                     ^ template.ng expression.ng keyword.operator.logical.ts
#                                      ^ template.ng expression.ng punctuation.accessor.ts
#                                       ^^^^^ template.ng expression.ng entity.name.function.ts
#                                            ^ template.ng expression.ng meta.brace.round.ts
#                                             ^ template.ng expression.ng meta.brace.round.ts
#                                              ^ template.ng expression.ng punctuation.accessor.ts
#                                               ^^^^^ template.ng expression.ng variable.other.property.ts
#                                                    ^ template.ng expression.ng
#                                                     ^ template.ng expression.ng keyword.operator.logical.ts
#                                                      ^ template.ng expression.ng
#                                                       ^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                                            ^ template.ng expression.ng meta.brace.round.ts
#                                                             ^ template.ng expression.ng
#                                                              ^^ template.ng expression.ng storage.type.as.ts
#                                                                ^ template.ng expression.ng
#                                                                 ^ template.ng expression.ng entity.name.type.ts
#                                                                  ^^ template.ng expression.ng
#                                                                    ^^^ template.ng expression.ng storage.type.ts
#                                                                       ^ template.ng expression.ng
#                                                                        ^ template.ng expression.ng variable.other.readwrite.ts
#                                                                         ^ template.ng expression.ng
#                                                                          ^ template.ng expression.ng keyword.operator.assignment.ts
#                                                                           ^ template.ng expression.ng
#                                                                            ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                                                                                 ^^ template.ng expression.ng
#                                                                                   ^^^ template.ng expression.ng storage.type.ts
#                                                                                      ^ template.ng expression.ng
#                                                                                       ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                                                                                            ^ template.ng expression.ng
#                                                                                             ^ template.ng expression.ng keyword.operator.assignment.ts
#                                                                                              ^ template.ng expression.ng
#                                                                                               ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                                                                                                    ^ template.ng expression.ng
#                                                                                                     ^^ template.ng punctuation.definition.block.ts
>{{ (let param of params?.get('value')!.property | async).anotherProperty | translate: ['language1', 'language2']; let i
#^^ template.ng punctuation.definition.block.ts
#  ^ template.ng expression.ng
#   ^ template.ng expression.ng meta.brace.round.ts
#    ^^^ template.ng expression.ng storage.type.ts
#       ^ template.ng expression.ng
#        ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#             ^ template.ng expression.ng
#              ^^ template.ng expression.ng keyword.operator.expression.of.ts
#                ^ template.ng expression.ng
#                 ^^^^^^ template.ng expression.ng variable.other.readwrite.ts
#                       ^ template.ng expression.ng punctuation.accessor.ts
#                        ^ template.ng expression.ng punctuation.accessor.ts
#                         ^^^ template.ng expression.ng entity.name.function.ts
#                            ^ template.ng expression.ng meta.brace.round.ts
#                             ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.begin.ts
#                              ^^^^^ template.ng expression.ng string.quoted.single.ts
#                                   ^ template.ng expression.ng string.quoted.single.ts punctuation.definition.string.end.ts
#                                    ^ template.ng expression.ng meta.brace.round.ts
#                                     ^ template.ng expression.ng keyword.operator.logical.ts
#                                      ^ template.ng expression.ng punctuation.accessor.ts
#                                       ^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                                               ^ template.ng expression.ng
#                                                ^ template.ng expression.ng keyword.operator.logical.ts
#                                                 ^ template.ng expression.ng
#                                                  ^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                                       ^ template.ng expression.ng meta.brace.round.ts
#                                                        ^ template.ng expression.ng punctuation.accessor.ts
#                                                         ^^^^^^^^^^^^^^^ template.ng expression.ng variable.other.property.ts
#                                                                        ^ template.ng expression.ng
#                                                                         ^ template.ng expression.ng keyword.operator.logical.ts
#                                                                          ^ template.ng expression.ng
#                                                                           ^^^^^^^^^ template.ng expression.ng entity.name.function.pipe.ng
#                                                                                    ^^ template.ng expression.ng
#                                                                                      ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                       ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                        ^^^^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                 ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                  ^ template.ng expression.ng meta.array.literal.ts punctuation.separator.comma.ts
#                                                                                                   ^ template.ng expression.ng meta.array.literal.ts
#                                                                                                    ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.begin.ts
#                                                                                                     ^^^^^^^^^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts
#                                                                                                              ^ template.ng expression.ng meta.array.literal.ts string.quoted.single.ts punctuation.definition.string.end.ts
#                                                                                                               ^ template.ng expression.ng meta.array.literal.ts meta.brace.square.ts
#                                                                                                                ^^ template.ng expression.ng
#                                                                                                                  ^^^ template.ng expression.ng storage.type.ts
#                                                                                                                     ^ template.ng expression.ng
#                                                                                                                      ^ template.ng expression.ng variable.other.readwrite.ts
>= index; }}
#^ template.ng expression.ng keyword.operator.assignment.ts
# ^ template.ng expression.ng
#  ^^^^^ template.ng expression.ng variable.other.readwrite.ts
#       ^^ template.ng expression.ng
#         ^^ template.ng punctuation.definition.block.ts
>
><!-- Regression -->
#^^^^^^^^^^^^^^^^^^^^ template.ng
><!-- #575 -->
#^^^^^^^^^^^^^^ template.ng
><div *ngFor="let n of nums; index as i"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngFor.html
#           ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#            ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#             ^^^ template.ng meta.ng-binding.template.html expression.ng storage.type.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                  ^ template.ng meta.ng-binding.template.html expression.ng
#                   ^^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.expression.of.ts
#                     ^ template.ng meta.ng-binding.template.html expression.ng
#                      ^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                          ^^ template.ng meta.ng-binding.template.html expression.ng
#                            ^^^^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#                                 ^ template.ng meta.ng-binding.template.html expression.ng
#                                  ^^ template.ng meta.ng-binding.template.html expression.ng storage.type.as.ts
#                                    ^ template.ng meta.ng-binding.template.html expression.ng
#                                     ^ template.ng meta.ng-binding.template.html expression.ng entity.name.type.ts
#                                      ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                                       ^^^^^^^^ template.ng
><div *matHeaderCellDef></div>
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ template.ng
><!-- #613 -->
#^^^^^^^^^^^^^^ template.ng
><div *ngIf="x$ | async as a"></div>
#^^^^^ template.ng
#     ^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html punctuation.definition.ng-binding-name.begin.html
#      ^^^^ template.ng meta.ng-binding.template.html entity.other.attribute-name.html entity.other.ng-binding-name.template.html entity.other.ng-binding-name.ngIf.html
#          ^ template.ng meta.ng-binding.template.html punctuation.separator.key-value.html
#           ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.begin.html
#            ^^ template.ng meta.ng-binding.template.html expression.ng variable.other.readwrite.ts
#              ^ template.ng meta.ng-binding.template.html expression.ng
#               ^ template.ng meta.ng-binding.template.html expression.ng keyword.operator.logical.ts
#                ^ template.ng meta.ng-binding.template.html expression.ng
#                 ^^^^^ template.ng meta.ng-binding.template.html expression.ng entity.name.function.pipe.ng
#                      ^ template.ng meta.ng-binding.template.html expression.ng
#                       ^^ template.ng meta.ng-binding.template.html expression.ng storage.type.as.ts
#                         ^ template.ng meta.ng-binding.template.html expression.ng
#                          ^ template.ng meta.ng-binding.template.html expression.ng entity.name.type.ts
#                           ^ template.ng meta.ng-binding.template.html string.quoted.html punctuation.definition.string.end.html
#                            ^^^^^^^^ template.ng